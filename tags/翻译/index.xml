<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>翻译 on Classic</title>
    <link>/tags/%E7%BF%BB%E8%AF%91/</link>
    <description>Recent content in 翻译 on Classic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 12 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/%E7%BF%BB%E8%AF%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>翻译Sam Altman的博客《How To Be Successful》</title>
      <link>/ai/%E7%BF%BB%E8%AF%91samaltman%E7%9A%84%E5%8D%9A%E5%AE%A2howtobesuccessful/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/ai/%E7%BF%BB%E8%AF%91samaltman%E7%9A%84%E5%8D%9A%E5%AE%A2howtobesuccessful/</guid>
      <description>写在前面  这是上周看到的Sam Altman一篇博客. 原文连接是: https://blog.samaltman.com/how-to-be-successful 周末在家尝试翻译一下 别问为啥不用chatGPT翻译 周日下午15:35 开始翻译的,中间因为吃饭.看剧打断了几次 最终翻译完已经是晚上23:50了 最终用时在3个小时左右 所以机器翻译10秒的事. 我自己上手就需要2-3个小时哼哼哧哧的才能勉强完成.  作者简介  Sam Altman,1985年4月22日,出生于美国伊利诺伊州的芝加哥。 8岁时学会了编程。9岁时收到一台电脑作为生日礼物， 2005年，他选择从大学辍学，同好友合作创办了社交媒体公司 2012年，他以4300万美元的价格将其出售。 2011年，任Y Combinator的合伙人，成为世界上最富有的企业家和天使投资人之一。 2015年，与时任特斯拉和SpaceX首席执行官的埃隆·马斯克共同创立了OpenAI。他们成立这家非营利性人工智能公司的目标是——确保人工智能不会消灭人类。 现为Y Combinator 总裁、人工智能实验室OpenAI首席执行官。 美国《商业周刊》最优秀年轻企业家 被媒体称为ChatGPT之父。 他的博客地址是:https://blog.samaltman.com/  &amp;ndash; 以下是正文
《How To Be Successful》怎么才能成功  I’ve observed thousands of founders and thought a lot about what it takes to make a huge amount of money or to create something important. Usually, people start off wanting the former and end up wanting the latter.</description>
    </item>
    
    <item>
      <title>MySQL的innodb中Next-Key锁的解析</title>
      <link>/dba/innodb_lock_2020/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/dba/innodb_lock_2020/</guid>
      <description>去年的某个时候，一个朋友在微信上问我MySQL间隙锁的案例，当时正在赶一个项目，没来得及看那个CASE，后来找不到了。昨天看到这篇jahfer写的博客: https://jahfer.com/posts/innodb-locks/ 觉得在介绍Next-Key锁的这方面很有创意的使用了自制的动画（非常简陋的动画 没啥用，我换成了截图做标记了)，不管是创意还是内容都值得一看
   作者:jahfer 翻译:51ak   &amp;ndash;翻译全文如下：
最近，我在调试MySQL高并发问题时有机会深入理解了InnoDB的锁定机制，这篇文章是我学习innodb锁行为的一个总结。
0.概念介绍 InnoDB只有几个锁定概念,但是它们的使用和行为取决于当前连接正在使用的事务隔离级别
 …the isolation level is the setting that fine-tunes the balance between performance and reliability, consistency, and reproducibility of results when multiple transactions are making changes and performing queries at the same time. 引自MySQL官方文档 https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html
 InnoDB一共有4种隔离级别（按最严格到最宽松的顺序）
 SERIALIZABLE 序列化 REPEATABLE READ (default) 可重复读 READ COMMITTED 读已提交 READ UNCOMMITTED 读未提交  每种隔离级别下的锁行为差异非常大，而我们现在只分析前两种隔离级别（SERIALIZABLE，REPEATABLE READ),首先让我们创建一个book 表。</description>
    </item>
    
  </channel>
</rss>
