<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>排序 on dboop.com</title>
    <link>/categories/%E6%8E%92%E5%BA%8F/</link>
    <description>Recent content in 排序 on dboop.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 11 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关系型数据库是怎么工作的3:合并排序</title>
      <link>/post/2017/09/11/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%843%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/09/11/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%843%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>2.合并排序 当需要排序一个集合时，你该怎么做？ 什么？ 你调用 sort()方法&amp;hellip;. 好吧，好答案&amp;hellip;但是对一个数据库来说，你需要弄明白这个sort()方法是怎么工作的.
这里有几种不错的排序算法，所以我这里重点说说这个最重要的算法：合并排序 你可能现在还不明白为啥对数据进行排序这么重要，在这篇文章后面的章节&amp;lt;查询优化&amp;gt;中会交待。 此外，了解合并排序将有助于我们理解后面的一个常用数据库操作：join ,因为它调用了合并排序
2.1合并 像许多有用的算法一样，合并排序基于一个技巧：将2个大小为N/2的已排序数组合并为N个元素的排序数组仅需要N次操作。 此操作称为合并。
让我们通过一个简单的例子来说明：
从上图上你可以看到，要想得到最终的已经排好序的8元素数组，你只需要迭代一次在两个有序的4元素数组中.
 比较两个数组的第一个元素(这里要想象一下两个数组都有个游标) 然后把最小的那个数放到8元素数组的第一个位置上 接着把游标顺着移走的数移到下一个位置上 重复1，2，3 动作，直到到达两个数组其中一个的终点。 然后把另一个数组里剩下的元素都放到8元素结果集中 这个排序的前题是原始的4元素数组是已经排序过的，所以你不需要在数组中做&amp;rdquo;go back&amp;rdquo; 操作  现在我们已经明白了合并排序的技巧了，这是我写的合并排序的伪码
array mergeSort(array a) if(length(a)==1) return a[0]; end if //recursive calls [left_array right_array] := split_into_2_equally_sized_arrays(a); array new_left_array := mergeSort(left_array); array new_right_array := mergeSort(right_array); //merging the 2 small ordered arrays into a big one array result := merge(new_left_array,new_right_array); return result;  合并排序把问题分解成更小的问题，然后这些通过解决小问题，得到初始问题的结果。(这种算法被称为：分而治之). 如果你不明白这种算法，不要着急，我一开始也不太明白，我们来尝试把这个算法拆成两阶段算法：
 分隔阶段 把数组分隔成更小的数组 排序阶段 把小的数组合并到一起（用合并）成一个大数组  2.</description>
    </item>
    
  </channel>
</rss>