<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>高并发 on dboop.com</title>
    <link>/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 高并发 on dboop.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 20 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/%E9%AB%98%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql并发控制相关参数:innodb_thread_concurrency,innodb_concurrency_tickets,innodb_adaptive_max_sleep_delay</title>
      <link>/post/2019/02/20/mysql%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0innodb_thread_concurrencyinnodb_concurrency_ticketsinnodb_adaptive_max_sleep_delay/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/02/20/mysql%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0innodb_thread_concurrencyinnodb_concurrency_ticketsinnodb_adaptive_max_sleep_delay/</guid>
      <description>目录：
[TOC]
正文：
mysql的innodb存储引擎控制并发的方式有很多，最常见的应该就属通过设置：innodb_thread_concurrency 设置mysql进入innodb的并发线程数
相关的参数有4个：
 innodb_thread_concurrency innodb_concurrency_tickets innodb_thread_sleep_delay innodb_adaptive_max_sleep_delay  先说结论 - 对并发不高的业务，不建议设置innodb_thread_concurrency(默认：innodb_thread_concurrency=0) - 不建议统一设置innodb_thread_concurrency来限制并发数。 - 只对特殊的业务场景，适度设置，以限制innodb并发，将高压力下线程之间抢占CPU而造成线程上下文切换的情况尽量阻塞在Innodb层之外（innodb_thread_concurrency）。 - 预防大SQL大事务占有太多资源，妨碍其他小事务通行（innodb_concurrency_tickets）
参数解释  1、innodb_thread_concurrency：同一时刻能够进入innodb层次并发执行的线程数(注意是并发不是并行)，如果SERVER层的线程大于这个值，多余的线程将会被放到一个叫做wait queue的队列中，不能进入INNODB层次（等待的线程状态显示为：sleeping before entering InnoDB)。默认值为0，它表示默认情况下不限制线程并发执行的数量。 2、innodb_concurrency_tickets：这个参数设置为一种tickets,默认是5000，代表一个事务进出innodb的次数，一般情况他代表处理的行数，但insert into () select .. 这种复合语句，select和insert都要计一次所以是双倍，大事物需要处理的行数自然更多，小事物需要的少，如果tickets减少到0，这个线程将被踢出innodb层次，进入wait queue的队列尾部，这里假设有一个小的事物正在排队进入innodb层，又或者它已经进入了innodb层没有获得CPU时间轮片，突然一个大的事物tickets耗尽被提出了innodb层，那么这个小事物就自然而然能够获得CPU轮片干活，而小事物执行非常快，执行完成后另外的事物又能尽快的获得CPU干活，不会由于OS线程调度不均匀的问题而造成的小事物饥饿问题。 3、innodb_thread_sleep_delay：是代表当事物被踢出innodb层次后等待睡眠完成后再次进入wait que队列，这个值的大小，以早期版本中，需要经过严格的评估或训练才能得到合理值，5.6.3以后可以设置innodb_adaptive_max_sleep_delay，来自动调整innodb_thread_sleep_delay，其单位是microseconds，从某种意义上来讲这个值加剧了大事物执行的时间，小事物也就更加容易进入INNODB层次获得CPU时间来干活。 4、innodb_adaptive_max_sleep_delay：在MySQL 5.6.3之前的版本中，MySQL要求通过测试和实验找到innodb_thread_sleep_delay的最优值，这个最优值可能会因工作负载情况不同而发生改变。在MySQL 5.6.3及更高版本中，你可以通过设置参数innodb_adaptive_max_sleep_delay为innodb_thread_sleep_delay设置最大允许的值，InnoDB会根据当前线程调度活动自动调整innodb_thread_sleep_delay的值，这种动态调整机制有助于工作的线程，在系统负载低时或系统接近满负荷运转时，都能够顺利的调度。 thread_concurrency MySQL 5.7之前还有这个参数，针对于Solaris 8及低版本的系统，设置此参数允许应用程序给同一时间运行的线程系统提示所需数量的线程，mysql5.7版本以后已移除 关于这几个值如果一旦innodb_thread_concurrency设置为0，其他值的设置均没有效果 如果设置为0后show engine status的下面值始终为0：0 queries inside InnoDB, 0 queries in queue  官方文档：https://dev.mysql.com/doc/refman/5.7/en/innodb-performance-thread_concurrency.html
源码解读 innodb_thread_concurrency 并发控制的源码参考：mysql-5.7.21\storage\innobase\handler\ha_innodb.cc 1476行左右
/** Enter InnoDB engine after checking the max number of user threads allowed, else the thread is put into sleep.</description>
    </item>
    
  </channel>
</rss>