<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>oracle性能优化介绍</title>
<link href="../../img/main.css" rel="stylesheet" type="text/css" />
<script src="../../img/daohang.js" type="text/javascript"></script>
<meta name="description" content="首先要先强调两个原则。原则一：注意where子句中的连接顺序．：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oracle采用自下而上的顺序解析where子句,根据这个原理,表之间的连接必须写在其他where条件之前,那些可以过滤掉最大数量记录的条件必须写在where子句的末尾.&nbsp;尤其是“主键id=？”这样的条件。&nbsp;原则二：select子句中避免使用‘*oracle性能优化介绍" />

</head>

<body>

<div id="container">
  <div id="header">
<div class="dh-logo cls"> <div class="dh-logo-logo" ><a href="#"><img src="../../img/logo.gif" alt="数据库管理员DBA学习网站  LOGO"  width="251" height="58" /></a></div><div class="dh-logo-ac" id="topbar"><div class="dh-logo-nav">    <span class="f_black">Tips</span>： 亲爱的<span class="f_333" title="注：网站的访客">GUEST</span>用户，系统已为你<span class="f_333" title="注：不解释">GRANT</span>了<span class="f_333" title="注：可以查看网站上的所有文章">SELECT</span>,<a href="/add.aspx" title="注：可以发表文章" rel="nofollow">INSERT</a> 权限 </div> </div></div>
<div id="topMain"><div id="top"><ul class="nav"><li><a href="../../index.htm">网站首页</a></li><li><a  href="../sqlserver/l_1_1.htm" title="SQLServer">SQLServer</a></li><li><a href="../Oracle/l_7_1.htm" class="hover"　title="Oracle">Oracle</a></li><li><a  href="../mysql/l_13_1.htm" title="MySQL">MySQL</a></li><li><a  href="../othersql/l_19_1.htm" title="其他数据库">其他数据库</a></li><li><a  href="../yunwei/l_26_1.htm" title="系统运维">系统运维</a></li><li><a  href="../kaoshi/l_34_1.htm" title="DBA考试">DBA考试</a></li><li><a  href="../dbahuati/l_39_1.htm" title="DBA话题">DBA话题</a></li></ul><ul class="sub"><li><a  href="../Oraclezhishi/l_8_1.htm" title="Oracle基础知识">基础知识</a>|</li><li><a  href="../Oracleha/l_9_1.htm" title="Oracle高可用性和HA">高可用性和HA</a>|</li><li><a  href="../Oracleyouhua/l_10_1.htm" title="Oracle性能与优化"><span class="zc_666">性能与优化</span></a>|</li><li><a  href="../Oracleguzhang/l_11_1.htm" title="Oracle故障与解决">故障与解决</a>|</li><li><a  href="../Oraclebi/l_12_1.htm" title="Oracle商业应用">Oracle商业应用</a>|</li></ul></div></div>
<br class="clearfloat" />

  </div>
    <div class="local_daohang">您现在的位置: <a href="../../">首页</a> &nbsp;&gt;&nbsp;<a href="../Oracle/l_7_1.htm">Oracle</a>&nbsp;&gt;&nbsp;<a href="../Oracleyouhua/l_10_1.htm">性能与优化</a></div>
  <div id="sidebar1">

  
  <div class='div_tab_tab'>
	<div id="div_login_title">通行证登录</div>
          <div id="div_login"> <iframe src="../../page/login.html" frameBorder="0" width="100%"  scrolling="no" height="190"></iframe>  
              &nbsp;</div>     
  </div>
    
  
   <div  class='div_tab_tab'>
  <div id="div_ran" > <span>【在线问答】</span><br /><a href="#" >[{类型}] {题干，这里会显示问题的标题}<br />点击进入答题>></a>
	</div>
  </div>
  
     

    <!-- end #sidebar1 --></div>
  <div id="mainContent">
  		
          
                        <div id="contentdiv">                            
                     <div id="atTitle"><h1>oracle性能优化介绍</h1></div>
					<div id="atSource"> 作者：[网上资料 ] </div>
					
                    <div id="viewcontent">
                   首先要先强调两个原则。原则一：注意WHERE子句中的连接顺序．：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>采用自下而上的顺序解析WHERE子句,根据这个原理,表之间的连接必须写在<a href="../../html/sqlsql/l_25_1.htm" title="其他" >其他</a>WHERE条件之前, 那些可以过滤掉最大数量记录的条件必须写在WHERE子句的末尾.&nbsp;尤其是“主键ID=？”这样的条件。&nbsp; 原则二： SELECT子句中避免使用 ‘ * ‘：&nbsp;&nbsp;&nbsp;&nbsp; <a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>在解析的过程中, 会将'*' 依次转换成所有的列名, 这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间 。简单地讲，语句执行的时间越短越好（尤其对于系统的终端用户来说）。而对于查询语句，由于全表扫描读取的数据多，尤其是对于大型表不仅查询速度慢，而且对磁盘IO造成大的压力，通常都要避免，而避免的方式通常是使用索引Index。使用索引的优势与代价。优势：1）索引是表的一个概念部分,用来提高检索数据的效率，<a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>使用了一个复杂的自平衡B-tree结构. 通常,通过索引查询数据比全表扫描要快. 当<a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>找出执行查询和Update语句的最佳路径时, <a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>优化器将使用索引. 同样在联结多个表时使用索引也可以提高效率.2） 另一个使用索引的好处是,它提供了主键(primary key)的唯一性验证.。那些LONG或LONG RAW数据类型, 你可以索引几乎所有的列. 通常, 在大型表中使用索引特别有效. 当然,你也会发现, 在扫描小表时,使用索引同样能提高效率.代价： 虽然使用索引能得到查询效率的提高,但是我们也必须注意到它的代价. 索引需要空间来存储,也需要定期维护, 每当有记录在表中增减或索引列被修改时, 索引本身也会被修改. 这意味着每条记录的INSERT , DELETE , UPDATE将为此多付出4 , 5 次的磁盘I/O . 因为索引需要额外的存储空间和处理,那些不必要的索引反而会 使查询反应时间变慢.。而且表越大，影响越严重。使用索引需要注意的地方：1、避免在索引列上使用NOT ，　&nbsp;&nbsp;&nbsp;&nbsp; 我们要避免在索引列上使用NOT, NOT会产生在和在索引列上使用函数相同的影响. 当<a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>”遇到”NOT,他就会停止使用索引转而执行全表扫描.2、避免在索引列上使用计算．&nbsp;&nbsp;&nbsp;&nbsp; WHERE子句中，如果索引列是函数的一部分．优化器将不使用索引而使用全表扫描． 举例:&nbsp;低效：SELECT … FROM DEPT WHERE SAL * 12 &gt; 25000;&nbsp;高效:SELECT … FROM DEPT WHERE SAL &gt; 25000/12;3、避免在索引列上使用IS NULL和IS NOT NULL&nbsp;&nbsp;&nbsp;&nbsp; 避免在索引中使用任何可以为空的列，<a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>将无法使用该索引．对于单列索引，如果列包含空值，索引中将不存在此记录. 对于复合索引，如果每个列都为空，索引中同样不存在此记录.　如果至少有一个列不为空，则记录存在于索引中．举例: 如果唯一性索引建立在表的A列和B列上, 并且表中存在一条记录的A,B值为(123,null) , <a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>将不接受下一条具有相同A,B值（123,null）的记录(插入). 然而如果所有的索引列都为空，<a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>将认为整个键值为空而空不等于空. 因此你可以插入1000 条具有相同键值的记录,当然它们都是空! 因为空值不存在于索引列中,所以WHERE子句中对索引列进行空值比较将使<a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>停用该索引.&nbsp;低效: (索引失效) SELECT … FROM DEPARTMENT WHERE DEPT_CODE IS NOT NULL; 高效: (索引有效) SELECT … FROM DEPARTMENT WHERE DEPT_CODE &gt;=0;4、注意通配符%的影响&nbsp;&nbsp; &nbsp;使用通配符的情况下<a href="../../html/Oracle/l_7_1.htm" title="Oracle" >Oracle</a>可能会停用该索引。如&nbsp; SELECT…FROM DEPARTMENT WHERE DEPT_CODE like ‘%123456%’（无效）。&nbsp; &nbsp;&nbsp; &nbsp; SELECT…FROM DEPARTMENT WHERE DEPT_CODE = ‘123456’（有效）5、避免改变索引列的类型.:&nbsp;&nbsp;&nbsp;&nbsp; 当比较不同数据类型的数据时, <a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>自动对列进行简单的类型转换.&nbsp;假设 EMPNO是一个数值类型的索引列. SELECT … FROM EMP WHERE EMPNO = ‘123' 实际上,经过<a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>类型转换, 语句转化为: SELECT … FROM EMP WHERE EMPNO = TO_NUMBER(‘123') 幸运的是,类型转换没有发生在索引列上,索引的用途没有被改变. 现在,假设EMP_TYPE是一个字符类型的索引列. SELECT … FROM EMP WHERE EMP_TYPE = 123 这个语句被<a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>转换为: SELECT … FROM EMP WHERETO_NUMBER(EMP_TYPE)=123 因为内部发生的类型转换, 这个索引将不会被用到! 为了避免<a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>对你的SQL进行隐式的类型转换, 最好把类型转换用显式表现出来. 注意当字符和数值比较时, <a href="../../html/Oracle/l_7_1.htm" title="ORACLE" >ORACLE</a>会优先转换数值类型到字符类型&nbsp;6、索引的一些“脾气”a. 如果检索数据量超过30%的表中记录数.使用索引将没有显著的效率提高.&nbsp;b. 在特定情况下, 使用索引也许会比全表扫描慢, 但这是同一个数量级上的区别. 而通常情况下,使用索引比全表扫描要块几倍乃至几千倍!&nbsp;除了使用索引，我们还有<a href="../../html/sqlsql/l_25_1.htm" title="其他" >其他</a>能减少资源消耗的方法：1、用EXISTS替换DISTINCT：&nbsp;&nbsp;&nbsp;&nbsp; 当提交一个包含一对多表信息(比如部门表和雇员表)的查询时,避免在SELECT子句中使用DISTINCT. 一般可以考虑用EXIST替换, EXISTS 使查询更为迅速,因为RDBMS核心模块将在子查询的条件一旦满足后,立刻返回结果.&nbsp;例子：&nbsp;(低效): SELECT DISTINCT DEPT_NO,DEPT_NAME FROM DEPT D , EMP E&nbsp;WHERE D.DEPT_NO = E.DEPT_NO&nbsp;And E.sex =man(高效): SELECT DEPT_NO,DEPT_NAME FROM DEPT D&nbsp;WHERE EXISTS&nbsp;( SELECT ‘X' FROM EMP E WHERE E.DEPT_NO = D.DEPT_NOAnd E.sex =man);&nbsp;2、用(UNION)UNION ALL替换OR (适用于索引列)&nbsp;&nbsp;&nbsp;&nbsp; 通常情况下, 用UNION替换WHERE子句中的OR将会起到较好的效果. 对索引列使用OR将造成全表扫描.&nbsp;注意, 以上规则只针对多个索引列有效. 如果有column没有被索引, 查询效率可能会因为你没有选择OR而降低. 在下面的例子中, LOC_ID 和REGION上都建有索引.高效: SELECT LOC_ID , LOC_DESC , REGION FROM LOCATION WHERE LOC_ID = 10 UNION ALLSELECT LOC_ID , LOC_DESC , REGION FROM LOCATION WHERE REGION = “MELBOURNE”&nbsp;低效: SELECT LOC_ID , LOC_DESC , REGION FROM LOCATION WHERE LOC_ID = 10 OR REGION = “MELBOURNE”&nbsp;如果你坚持要用OR, 那就需要返回记录最少的索引列写在最前面.3、用UNION-ALL 替换UNION ( 如果有可能的话)：&nbsp;&nbsp;&nbsp;&nbsp; 当SQL语句需要UNION两个查询结果集合时,这两个结果集合会以UNION-ALL的方式被合并, 然后在输出最终结果前进行排序. 如果用UNION ALL替代UNION, 这样排序就不是必要了. 效率就会因此得到提高. 需要注意的是，UNION ALL 将重复输出两个结果集合中相同记录. 因此各位还是要从业务需求分析使用UNION ALL的可行性. UNION 将对结果集合排序,这个操作会使用到SORT_AREA_SIZE这块内存. 对于这块内存的优化也是相当重要的.4、Order By语句加在索引列，最好是主键PK上。&nbsp;&nbsp; &nbsp;&nbsp; SELECT DEPT_CODE FROM DEPT ORDER BY DEPT_TYPE（低效）&nbsp;&nbsp; &nbsp;&nbsp; SELECT DEPT_CODE FROM DEPT ORDER BY DEPT_CODE （高效）5、避免使用耗费资源的操作:&nbsp;&nbsp;&nbsp;&nbsp; 带有DISTINCT,UNION,MINUS,INTERSECT的SQL语句会启动SQL引擎 执行耗费资源的排序(SORT)功能. DISTINCT需要一次排序操作, 而<a href="../../html/sqlsql/l_25_1.htm" title="其他" >其他</a>的至少需要执行两次排序. 通常, 带有UNION, MINUS , INTERSECT的SQL语句都可以用<a href="../../html/sqlsql/l_25_1.htm" title="其他" >其他</a>方式重写. 如果你的数据库的SORT_AREA_SIZE调配得好, 使用UNION , MINUS, INTERSECT也是可以考虑的, 毕竟它们的可读性很强6、使用Where替代Having（如果可以的话）优化GROUP BY:&nbsp;&nbsp;&nbsp;&nbsp; 提高GROUP BY 语句的效率, 可以通过将不需要的记录在GROUP BY 之前过滤掉.下面两个查询返回相同结果但第二个明显就快了许多.&nbsp;低效:SELECT JOB , AVG(SAL)FROM EMP GROUP JOB HAVING JOB = ‘PRESIDENT'AND AVG(SAL)&gt;XXX高效:SELECT JOB , AVG(SAL)FROM EMPWHERE JOB = ‘PRESIDENT'OR JOB = ‘MANAGER' GROUP JOB Having AND AVG(SAL)&gt;XXX7通常来说，如果语句能够避免子查询的 使用，就尽量不用子查询。因为子查询的开销是相当昂贵的。具体的例子在后面的案例“一条SQL的优化过程”中。
																	|
</div>  
 
                    </div>
                    <hr class="hrdt" />	
<div id="res"></div>
                        
                        </div>

<!-- end #mainContent --></div>
	<!-- 这个用于清除浮动的元素应当紧跟 #mainContent div 之后，以便强制 #container div 包含所有的子浮动 -->
	<br class="clearfloat" />

      
   
	<div id="footer">
  <ul class="green_1">		<li><div id="slogo"></div></li>		<li><div id="bline"></div></li>		<li><div id="binfo">网站名称：数据库DBA学习网站 www.580top.com<br />网络维护：51ak(微信:sohu91) <br /></div></li>	</ul>
   <script charset="UTF-8" id="LA_COLLECT" src="//sdk.51.la/js-sdk-pro.min.js"></script>
<script>LA.init({id:"K2Iiv8isAYH4TLPh",ck:"K2Iiv8isAYH4TLPh"})</script>
  <!-- end #footer --></div>
  <!-- end #footer --></div>
<!-- end #container --></div>
</body>
</html>
