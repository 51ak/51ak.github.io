<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>MYSQL缓冲区和缓存设置</title>
<link href="../../img/main.css" rel="stylesheet" type="text/css" />
<script src="../../img/daohang.js" type="text/javascript"></script>
<meta name="description" content="mysql&nbsp;支持超过100个的可调节设置；但是幸运的是，掌握少数几个就可以满足大部分需要。查找这些设置的正确值可以通过&nbsp;showstatus命令查看状态变量，从中可以确定&nbsp;mysqld&nbsp;的运作情况是否符合我们的预期。给缓冲区和缓存分配的内存不能超过系统中的现有内存，因此调优通常都需要进行一些妥协。<br/>mysql可调节设置可以应用于整个&nbsMYSQL缓冲区和缓存设置" />

</head>

<body>

<div id="container">
  <div id="header">
<div class="dh-logo cls"> <div class="dh-logo-logo" ><a href="#"><img src="../../img/logo.gif" alt="数据库管理员DBA学习网站  LOGO"  width="251" height="58" /></a></div><div class="dh-logo-ac" id="topbar"><div class="dh-logo-nav">    <span class="f_black">Tips</span>： 亲爱的<span class="f_333" title="注：网站的访客">GUEST</span>用户，系统已为你<span class="f_333" title="注：不解释">GRANT</span>了<span class="f_333" title="注：可以查看网站上的所有文章">SELECT</span>,<a href="/add.aspx" title="注：可以发表文章" rel="nofollow">INSERT</a> 权限 </div> </div></div>
<div id="topMain"><div id="top"><ul class="nav"><li><a href="../../index.htm">网站首页</a></li><li><a  href="../sqlserver/l_1_1.htm" title="SQLServer">SQLServer</a></li><li><a  href="../Oracle/l_7_1.htm" title="Oracle">Oracle</a></li><li><a href="../mysql/l_13_1.htm" class="hover"　title="MySQL">MySQL</a></li><li><a  href="../othersql/l_19_1.htm" title="其他数据库">其他数据库</a></li><li><a  href="../yunwei/l_26_1.htm" title="系统运维">系统运维</a></li><li><a  href="../kaoshi/l_34_1.htm" title="DBA考试">DBA考试</a></li><li><a  href="../dbahuati/l_39_1.htm" title="DBA话题">DBA话题</a></li></ul><ul class="sub"><li><a  href="../mysqlzhishi/l_14_1.htm" title="MySQL基础知识"><span class="zc_666">基础知识</span></a>|</li><li><a  href="../mysqlha/l_15_1.htm" title="MySQL高可用性和HA">高可用性和HA</a>|</li><li><a  href="../mysqlyouhua/l_16_1.htm" title="MySQL性能与优化">性能与优化</a>|</li><li><a  href="../mysqlguzhang/l_17_1.htm" title="MySQL故障与解决">故障与解决</a>|</li><li><a  href="../mysqlyuanma/l_18_1.htm" title="MySQL源码解读">源码解读</a>|</li></ul></div></div>
<br class="clearfloat" />

  </div>
    <div class="local_daohang">您现在的位置: <a href="../../">首页</a> &nbsp;&gt;&nbsp;<a href="../mysql/l_13_1.htm">MySQL</a>&nbsp;&gt;&nbsp;<a href="../mysqlzhishi/l_14_1.htm">基础知识</a></div>
  <div id="sidebar1">

  
  <div class='div_tab_tab'>
	<div id="div_login_title">通行证登录</div>
          <div id="div_login"> <iframe src="../../page/login.html" frameBorder="0" width="100%"  scrolling="no" height="190"></iframe>  
              &nbsp;</div>     
  </div>
    
  
   <div  class='div_tab_tab'>
  <div id="div_ran" > <span>【在线问答】</span><br /><a href="#" >[{类型}] {题干，这里会显示问题的标题}<br />点击进入答题>></a>
	</div>
  </div>
  
     

    <!-- end #sidebar1 --></div>
  <div id="mainContent">
  		
          
                        <div id="contentdiv">                            
                     <div id="atTitle"><h1>MYSQL缓冲区和缓存设置</h1></div>
					<div id="atSource"> 作者：[网上资料 ] </div>
					
                    <div id="viewcontent">
                   MySQL&nbsp;支持超过 100 个的可调节设置；但是幸运的是，掌握少数几个就可以满足大部分需要。查找这些设置的正确值可以通过&nbsp;SHOW STATUS命令查看状态变量，从中可以确定&nbsp;<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>d&nbsp;的运作情况是否符合我们的预期。给缓冲区和缓存分配的内存不能超过系统中的现有内存，因此调优通常都需要进行一些妥协。<br />MySQL 可调节设置可以应用于整个&nbsp;<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>d&nbsp;进程，也可以应用于单个客户机会话。<br />服务器端的设置<br />每个表都可以表示为磁盘上的一个文件，必须先打开，后读取。为了加快从文件中读取数据的过程，<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>d&nbsp;对这些打开文件进行了缓存，其最大数目由 /etc/<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>d.conf 中的&nbsp;table_cache&nbsp;指定。清单 4 给出了显示与打开表有关的活动的方式。<br />清单 4. 显示打开表的活动<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>&gt; SHOW STATUS LIKE 'open%tables';+---------------+-------+| Variable_name | Value |+---------------+-------+| Open_tables   | 5000  || Opened_tables | 195   |+---------------+-------+2 rows in set (0.00 sec)清单 4 说明目前有 5,000 个表是打开的，有 195 个表需要打开，因为现在缓存中已经没有可用文件描述符了（由于统计信息在前面已经清除了，因此可能会存在 5,000 个打开表中只有 195 个打开记录的情况）。如果&nbsp;Opened_tables&nbsp;随着重新运行&nbsp;SHOW STATUS&nbsp;命令快速增加，就说明缓存命中率不够。如果&nbsp;Open_tables&nbsp;比&nbsp;table_cache&nbsp;设置小很多，就说明该值太大了（不过有空间可以增长总不是什么坏事）。例如，使用&nbsp;table_cache = 5000&nbsp;可以调整表的缓存。<br />与表的缓存类似，对于线程来说也有一个缓存。&nbsp;<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>d&nbsp;在接收连接时会根据需要生成线程。在一个连接变化很快的繁忙服务器上，对线程进行缓存便于以后使用可以加快最初的连接。<br />清单 5 显示如何确定是否缓存了足够的线程。<br />清单 5. 显示线程使用统计信息<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>&gt; SHOW STATUS LIKE 'threads%';+-------------------+--------+| Variable_name     | Value  |+-------------------+--------+| Threads_cached    | 27     || Threads_connected | 15     || Threads_created   | 838610 || Threads_running   | 3      |+-------------------+--------+4 rows in set (0.00 sec)此处重要的值是&nbsp;Threads_created，每次&nbsp;<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>d&nbsp;需要创建一个新线程时，这个值都会增加。如果这个数字在连续执行&nbsp;SHOW STATUS&nbsp;命令时快速增加，就应该尝试增大线程缓存。例如，可以在 my.cnf 中使用&nbsp;thread_cache = 40&nbsp;来实现此目的。<br />关键字缓冲区保存了 MyISAM 表的索引块。理想情况下，对于这些块的请求应该来自于内存，而不是来自于磁盘。清单 6 显示了如何确定有多少块是从磁盘中读取的，以及有多少块是从内存中读取的。<br />清单 6. 确定关键字效率<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>&gt; show status like '%key_read%';+-------------------+-----------+| Variable_name     | Value     |+-------------------+-----------+| Key_read_requests | 163554268 || Key_reads         | 98247     |+-------------------+-----------+2 rows in set (0.00 sec)Key_reads&nbsp;代表命中磁盘的请求个数，&nbsp;Key_read_requests&nbsp;是总数。命中磁盘的读请求数除以读请求总数就是不中比率 —— 在本例中每 1,000 个请求，大约有 0.6 个没有命中内存。如果每 1,000 个请求中命中磁盘的数目超过 1 个，就应该考虑增大关键字缓冲区了。例如，key_buffer = 384M&nbsp;会将缓冲区设置为 384MB。<br />临时表可以在更高级的查询中使用，其中数据在进一步进行处理（例如&nbsp;GROUP BY&nbsp;字句）之前，都必须先保存到临时表中；理想情况下，在内存中创建临时表。但是如果临时表变得太大，就需要写入磁盘中。清单 7 给出了与临时表创建有关的统计信息。<br />清单 7. 确定临时表的使用<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>&gt; SHOW STATUS LIKE 'created_tmp%';+-------------------------+-------+| Variable_name           | Value |+-------------------------+-------+| Created_tmp_disk_tables | 30660 || Created_tmp_files       | 2     || Created_tmp_tables      | 32912 |+-------------------------+-------+3 rows in set (0.00 sec)每次使用临时表都会增大&nbsp;Created_tmp_tables；基于磁盘的表也会增大Created_tmp_disk_tables。对于这个比率，并没有什么严格的规则，因为这依赖于所涉及的查询。长时间观察&nbsp;Created_tmp_disk_tables&nbsp;会显示所创建的磁盘表的比率，您可以确定设置的效率。tmp_table_size&nbsp;和&nbsp;max_heap_table_size&nbsp;都可以控制临时表的最大大小，因此请确保在 my.cnf 中对这两个值都进行了设置。<br />每个会话的设置<br />下面这些设置针对于每个会话。在设置这些数字时要十分谨慎，因为它们在乘以可能存在的连接数时候，这些选项表示大量的内存！您可以通过代码修改会话中的这些数字，或者在 my.cnf 中为所有会话修改这些设置。<br />当 MySQL 必须要进行排序时，就会在从磁盘上读取数据时分配一个排序缓冲区来存放这些数据行。如果要排序的数据太大，那么数据就必须保存到磁盘上的临时文件中，并再次进行排序。如果sort_merge_passes&nbsp;状态变量很大，这就指示了磁盘的活动情况。清单 8 给出了一些与排序相关的状态计数器信息。<br />清单 8. 显示排序统计信息<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>&gt; SHOW STATUS LIKE "sort%";+-------------------+---------+| Variable_name     | Value   |+-------------------+---------+| Sort_merge_passes | 1       || Sort_range        | 79192   || Sort_rows         | 2066532 || Sort_scan         | 44006   |+-------------------+---------+4 rows in set (0.00 sec)如果&nbsp;sort_merge_passes&nbsp;很大，就表示需要注意&nbsp;sort_buffer_size。例如，&nbsp;sort_buffer_size = 4M&nbsp;将排序缓冲区设置为 4MB。<br />MySQL 也会分配一些内存来读取表。理想情况下，索引提供了足够多的信息，可以只读入所需要的行，但是有时候查询（设计不佳或数据本性使然）需要读取表中大量数据。要理解这种行为，需要知道运行了多少个&nbsp;SELECT&nbsp;语句，以及需要读取表中的下一行数据的次数（而不是通过索引直接访问）。实现这种功能的命令如清单 9 所示。<br />清单 9. 确定表扫描比率<a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>&gt; SHOW STATUS LIKE "com_select";+---------------+--------+| Variable_name | Value  |+---------------+--------+| Com_select    | 318243 |+---------------+--------+1 row in set (0.00 sec)<br /><a href="../../html/mysql/l_13_1.htm" title="mysql" >mysql</a>&gt; SHOW STATUS LIKE "handler_read_rnd_next";+-----------------------+-----------+| Variable_name         | Value     |+-----------------------+-----------+| Handler_read_rnd_next | 165959471 |+-----------------------+-----------+1 row in set (0.00 sec)Handler_read_rnd_next&nbsp;/&nbsp;Com_select&nbsp;得出了表扫描比率 —— 在本例中是 521:1。如果该值超过 4000，就应该查看&nbsp;read_buffer_size，例如&nbsp;read_buffer_size = 4M。如果这个数字超过了 8M，就应该与开发人员讨论一下对这些查询进行调优了！<br />
																	|
</div>  
 
                    </div>
                    <hr class="hrdt" />	
<div id="res"></div>
                        
                        </div>

<!-- end #mainContent --></div>
	<!-- 这个用于清除浮动的元素应当紧跟 #mainContent div 之后，以便强制 #container div 包含所有的子浮动 -->
	<br class="clearfloat" />

      
   
	<div id="footer">
  <ul class="green_1">		<li><div id="slogo"></div></li>		<li><div id="bline"></div></li>		<li><div id="binfo">网站名称：数据库DBA学习网站 www.580top.com<br />网络维护：51ak(微信:sohu91) <br /></div></li>	</ul>
   <script charset="UTF-8" id="LA_COLLECT" src="//sdk.51.la/js-sdk-pro.min.js"></script>
<script>LA.init({id:"K2Iiv8isAYH4TLPh",ck:"K2Iiv8isAYH4TLPh"})</script>
  <!-- end #footer --></div>
  <!-- end #footer --></div>
<!-- end #container --></div>
</body>
</html>
