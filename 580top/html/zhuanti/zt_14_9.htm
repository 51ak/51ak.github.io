<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>专题报道：《存储引擎InnoDB》 - 数据库管理员DBA学习网站 </title>
<link href="../../img/main.css" rel="stylesheet" type="text/css" />
<script src="../../img/daohang.js" type="text/javascript"></script>
</head>

<body>


<div id="container">
  <div id="header">
<div class="dh-logo cls"> <div class="dh-logo-logo" ><a href="#"><img src="../../img/logo.gif" alt="数据库管理员DBA学习网站  LOGO"  width="251" height="58" /></a></div><div class="dh-logo-ac" id="topbar"><div class="dh-logo-nav">    <span class="f_black">Tips</span>： 亲爱的<span class="f_333" title="注：网站的访客">GUEST</span>用户，系统已为你<span class="f_333" title="注：不解释">GRANT</span>了<span class="f_333" title="注：可以查看网站上的所有文章">SELECT</span>,<a href="/add.aspx" title="注：可以发表文章" rel="nofollow">INSERT</a> 权限 </div> </div></div>
<div id="topMain"><div id="top"><ul class="nav"><li><a href="../../index.htm">网站首页</a></li><li><a  href="../sqlserver/l_1_1.htm" title="SQLServer">SQLServer</a></li><li><a  href="../Oracle/l_7_1.htm" title="Oracle">Oracle</a></li><li><a  href="../mysql/l_13_1.htm" title="MySQL">MySQL</a></li><li><a  href="../othersql/l_19_1.htm" title="其他数据库">其他数据库</a></li><li><a  href="../yunwei/l_26_1.htm" title="系统运维">系统运维</a></li><li><a  href="../kaoshi/l_34_1.htm" title="DBA考试">DBA考试</a></li><li><a  href="../dbahuati/l_39_1.htm" title="DBA话题">DBA话题</a></li><li><a href="../zt/l_index_1.htm" class="hover">网站专题</a></li></ul><ul class="sub"><li><a  href="../zt/l_sqlserver_1.htm" title="SQLServer专题">SQLServer</a>|</li><li><a  href="../zt/l_Oracle_1.htm" title="Oracle专题">Oracle</a>|</li><li><a  href="../zt/l_mysql_1.htm" title="MySQL专题">MySQL</a>|</li><li><a  href="../zt/l_othersql_1.htm" title="其他数据库专题">其他数据库</a>|</li><li><a  href="../zt/l_yunwei_1.htm" title="系统运维专题">系统运维</a>|</li><li><a  href="../zt/l_kaoshi_1.htm" title="DBA考试专题">DBA考试</a>|</li><li><a  href="../zt/l_dbahuati_1.htm" title="DBA话题专题">DBA话题</a>|</li></ul></div></div>
<br class="clearfloat" />
</div>
 
 
    <div class="local_daohang">您现在的位置: <a href="../../">首页</a> &nbsp;&gt;&nbsp;<a href="../zt/l_index_1.htm">网站专题</a>&nbsp;&gt;&nbsp; <a href="../zt/l_mysql_1.htm">MySQL</a>&nbsp;&gt;&nbsp;<a href="zt_14_1.htm">存储引擎InnoDB</a></div>
  <div id="sidebar1">

  <div class='div_tab_tab'>
	<div id="div_login_title">580top数据库:</div>
          <div id="div_login"> <iframe src="../../page/login.html" frameBorder="0" width="100%"  scrolling="no" height="190"></iframe>  
 &nbsp;</div>    
  </div>
    
  
   <div  class='div_tab_tab'>
  <div id="div_ran" > <span>【在线问答】</span><br /><a href="#" >[{类型}] {题干，这里会显示问题的标题}<br />点击进入答题>></a>
	</div>
  </div>
  
   
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
    <div class="d9"><p>&nbsp;</p></div>
    <p>&nbsp;</p>
    <p>&nbsp;</p>


    <div class="d3"><p>&nbsp;</p></div>
    
    <p>&nbsp;</p>
    <!-- end #sidebar1 --></div>
  <div id="mainContent">
  

        <div id="contentdiv"> 
            <div id="news_list">
                   <div>
                              <div class="d2"><h1>专题报道：《存储引擎InnoDB》</h1><span>InnoDB 是 MySQL 上第一个提供外键约束的数据存储引擎，除了提供事务处理外，InnoDB 还支持行锁，提供和 Oracle 一样的一致性的不加锁读取，能增加并发读的用户数量并提高性能，不会增加锁的数量。InnoDB 的设计目标是处理大容量数据时最大化性能，它的 CPU 利用率是其他所有基于磁盘的关系数据库引擎中最有效率的。</span></div><UL><LI class=list_title><SPAN>2012/1/8 22:29:40</SPAN><a href="../201201/dba_995.htm"  title="MySQL数据库InnoDB存储引擎查询优化器实现的分析之统计信息 ">MySQL数据库InnoDB存储引擎查询优化器实现的分析之统...</a>  <LI   class="text">1 统计信息1.1 统计信息收集show index from nkeys;函数调用流程：sql_parse.cc::mysql_execute_command(lex-&gt;sql_command == sqlcom_show_keys) -&gt;sql_show.cc::get_schema_stat_record -&gt;ha_innobase::info(ha_status_vari<a href="../201201/dba_995.htm" title="MySQL数据库InnoDB存储引擎查询优化器实现的分析之统计信息 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：Eugene</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2012/1/8 22:30:52</SPAN><a href="../201201/dba_994.htm"  title="MySQL数据库InnoDB存储引擎查询优化器实现的分析 ">MySQL数据库InnoDB存储引擎查询优化器实现的分析 </a>  <LI   class="text">一、 目的分析mysql数据库的查询优化器如何优化innodb存储引擎的查询语句：(1). 如何实现查询优化的功能？(2). 为了能实现查询优化，存储引擎需要做哪些方面的配合？二、 测试准备mysql数据库软件版本：5.1.49-debug-log测试用例的存储引擎：innodb测试用例的表结构：create table `nkeys` (`c1` int(11) not null,`c2` in<a href="../201201/dba_994.htm" title="MySQL数据库InnoDB存储引擎查询优化器实现的分析 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：Eugene</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2012/1/8 22:31:30</SPAN><a href="../201201/dba_993.htm"  title="MySQL数据库InnoDB存储引擎查询优化器实现的分析之附录 ">MySQL数据库InnoDB存储引擎查询优化器实现的分析之附...</a>  <LI   class="text">本系列文章主目录：mysql数据库innodb存储引擎查询优化器实现的分析附录一create table aaa (a1 int,a2 int,a3 int,a4 int,a5 int,a6 int,a7 int,a8 int,a9 int) engine = innodb;create index a1 on aaa (a1);create index a1a2 on aaa (a1,a2);c<a href="../201201/dba_993.htm" title="MySQL数据库InnoDB存储引擎查询优化器实现的分析之附录 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：Eugene</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2012/1/27 18:08:39</SPAN><a href="../201201/dba_989.htm"  title="在Server层实现Kill Idle Transaction ">在Server层实现Kill Idle Transaction </a>  <LI   class="text">在上一篇文章里我们写了如何针对innodb清理空闲事务《如何杀掉空闲事务》，在@sleebin9 的提示下，这个功能不仅可以针对innodb，也可以用于所有mysql的事务引擎。如何在server层实现呢，sql/sql_parse.cc的do_command()函数是个好函数，连接线程会循环调用do_command()来读取并执行命令，在do_command()函数中，会调用my_net_set<a href="../201201/dba_989.htm" title="在Server层实现Kill Idle Transaction ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：P.Linux</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2012/2/5 23:25:55</SPAN><a href="../201202/dba_987.htm"  title="由浅入深理解索引的实现(2) ">由浅入深理解索引的实现(2) </a>  <LI   class="text">果要看“由浅入深理解索引的实现(1)”，请点这里。教科书上的b+tree是一个简化了的，方便于研究和教学的b+tree。然而在数据库实现时，为了更好的性能或者降低实现的难度，都会在细节上进行一定的变化。下面以innodb为例，来说说这些变化。04 - sparse index中的数据指针 在“由浅入深理解索引的实现(1)”中提到，sparse index中的每个键值都有一个指针指向 所在的数据页。<a href="../201202/dba_987.htm" title="由浅入深理解索引的实现(2) ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：sleebin9</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2012/2/26 22:20:12</SPAN><a href="../201202/dba_983.htm"  title="MySQL 备份和其恢复机制原理简述 ">MySQL 备份和其恢复机制原理简述 </a>  <LI   class="text"> 文章主要讨论的是 mysql 备份和其恢复机制，以及对维护数据表的正确维护，其中主要包括的两种不同表的类型有myisam与 innodb，文中所设计的 mysql 版本为 5.0.22。以下就是具体内容的描述。目前 mysql 支持的免费mysql 备份工具有：mysqldump、mysqlhotcopy，还可以用 sql 语法进行备份：backup table 或者 select into o<a href="../201202/dba_983.htm" title="MySQL 备份和其恢复机制原理简述 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：luckyyuan</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2012/2/26 22:50:57</SPAN><a href="../201202/dba_982.htm"  title="HandlerSocket返回错误码167的bug分析 ">HandlerSocket返回错误码167的bug分析 </a>  <LI   class="text">用handlersocket大量并发插入数据到多个innodb的表(都使用自增id)的时候就会大量出现167的错误,从而tps下降极为厉害.让我们来分析这个bug是怎么产生的.我们先来重现这个bug:先建两个表:create table test1 (id int(20) unsigned not null auto_increment,data varchar(200) default null<a href="../201202/dba_982.htm" title="HandlerSocket返回错误码167的bug分析 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：淘宝文通</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2012/3/4 17:53:36</SPAN><a href="../201203/dba_977.htm"  title="用insert delayed减少阻塞时间 ">用insert delayed减少阻塞时间 </a>  <LI   class="text">高并发地进行insert经常导致阻塞很长时间。有些场景下我们并不需要知道insert之后的结果。因此可以采用insert delayed方法。insert delayed是myisam对与sql标准的扩展，在innodb引擎下并不支持。insert delayed之后，系统会立刻返回结果，使用last_inserted_id方法不能获得insert delayed得到的主键id<a href="../201203/dba_977.htm" title="用insert delayed减少阻塞时间 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：shen2</SPAN>  </LI></UL>
                            </div>
                            <div class="sabrosus"><a href='zt_14_1.htm' title='回到第一页'>首页</a><a href='zt_14_8.htm' title='上一页'>上一页</a><a>...</a><a href='zt_14_5.htm' title='第5页'>5</a><a href='zt_14_6.htm' title='第6页'>6</a><a href='zt_14_7.htm' title='第7页'>7</a><a href='zt_14_8.htm' title='第8页'>8</a><span class="current">9</span><a href='zt_14_10.htm' title='第10页'>10</a><a href='zt_14_11.htm' title='第11页'>11</a><a href='zt_14_10.htm' title='下一页'>下一页</a><a href='zt_14_11.htm' title='尾页'>尾页</a><input type="hidden" value="9" id="page">&nbsp;&nbsp;<strong>分页：9/11页</strong></div>         
            </div>        
        </div>
<!-- end #mainContent --></div>
	<!-- 这个用于清除浮动的元素应当紧跟 #mainContent div 之后，以便强制 #container div 包含所有的子浮动 -->
	<br class="clearfloat" />

      
   
	<div id="footer">
  <ul class="green_1">		<li><div id="slogo"></div></li>		<li><div id="bline"></div></li>		<li><div id="binfo">网站名称：数据库DBA学习网站 www.580top.com<br />网络维护：51ak(微信:sohu91) <br /></div></li>	</ul>
	
   <script charset="UTF-8" id="LA_COLLECT" src="//sdk.51.la/js-sdk-pro.min.js"></script>
<script>LA.init({id:"K2Iiv8isAYH4TLPh",ck:"K2Iiv8isAYH4TLPh"})</script>
  <!-- end #footer --></div>
<!-- end #container --></div>
</body>
</html>
