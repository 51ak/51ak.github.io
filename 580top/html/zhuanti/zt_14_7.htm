<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>专题报道：《存储引擎InnoDB》 - 数据库管理员DBA学习网站 </title>
<link href="../../img/main.css" rel="stylesheet" type="text/css" />
<script src="../../img/daohang.js" type="text/javascript"></script>
</head>

<body>


<div id="container">
  <div id="header">
<div class="dh-logo cls"> <div class="dh-logo-logo" ><a href="#"><img src="../../img/logo.gif" alt="数据库管理员DBA学习网站  LOGO"  width="251" height="58" /></a></div><div class="dh-logo-ac" id="topbar"><div class="dh-logo-nav">    <span class="f_black">Tips</span>： 亲爱的<span class="f_333" title="注：网站的访客">GUEST</span>用户，系统已为你<span class="f_333" title="注：不解释">GRANT</span>了<span class="f_333" title="注：可以查看网站上的所有文章">SELECT</span>,<a href="/add.aspx" title="注：可以发表文章" rel="nofollow">INSERT</a> 权限 </div> </div></div>
<div id="topMain"><div id="top"><ul class="nav"><li><a href="../../index.htm">网站首页</a></li><li><a  href="../sqlserver/l_1_1.htm" title="SQLServer">SQLServer</a></li><li><a  href="../Oracle/l_7_1.htm" title="Oracle">Oracle</a></li><li><a  href="../mysql/l_13_1.htm" title="MySQL">MySQL</a></li><li><a  href="../othersql/l_19_1.htm" title="其他数据库">其他数据库</a></li><li><a  href="../yunwei/l_26_1.htm" title="系统运维">系统运维</a></li><li><a  href="../kaoshi/l_34_1.htm" title="DBA考试">DBA考试</a></li><li><a  href="../dbahuati/l_39_1.htm" title="DBA话题">DBA话题</a></li><li><a href="../zt/l_index_1.htm" class="hover">网站专题</a></li></ul><ul class="sub"><li><a  href="../zt/l_sqlserver_1.htm" title="SQLServer专题">SQLServer</a>|</li><li><a  href="../zt/l_Oracle_1.htm" title="Oracle专题">Oracle</a>|</li><li><a  href="../zt/l_mysql_1.htm" title="MySQL专题">MySQL</a>|</li><li><a  href="../zt/l_othersql_1.htm" title="其他数据库专题">其他数据库</a>|</li><li><a  href="../zt/l_yunwei_1.htm" title="系统运维专题">系统运维</a>|</li><li><a  href="../zt/l_kaoshi_1.htm" title="DBA考试专题">DBA考试</a>|</li><li><a  href="../zt/l_dbahuati_1.htm" title="DBA话题专题">DBA话题</a>|</li></ul></div></div>
<br class="clearfloat" />
</div>
 
 
    <div class="local_daohang">您现在的位置: <a href="../../">首页</a> &nbsp;&gt;&nbsp;<a href="../zt/l_index_1.htm">网站专题</a>&nbsp;&gt;&nbsp; <a href="../zt/l_mysql_1.htm">MySQL</a>&nbsp;&gt;&nbsp;<a href="zt_14_1.htm">存储引擎InnoDB</a></div>
  <div id="sidebar1">

  <div class='div_tab_tab'>
	<div id="div_login_title">580top数据库:</div>
          <div id="div_login"> <iframe src="../../page/login.html" frameBorder="0" width="100%"  scrolling="no" height="190"></iframe>  
 &nbsp;</div>    
  </div>
    
  
   <div  class='div_tab_tab'>
  <div id="div_ran" > <span>【在线问答】</span><br /><a href="#" >[{类型}] {题干，这里会显示问题的标题}<br />点击进入答题>></a>
	</div>
  </div>
  
   
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
    <div class="d9"><p>&nbsp;</p></div>
    <p>&nbsp;</p>
    <p>&nbsp;</p>


    <div class="d3"><p>&nbsp;</p></div>
    
    <p>&nbsp;</p>
    <!-- end #sidebar1 --></div>
  <div id="mainContent">
  

        <div id="contentdiv"> 
            <div id="news_list">
                   <div>
                              <div class="d2"><h1>专题报道：《存储引擎InnoDB》</h1><span>InnoDB 是 MySQL 上第一个提供外键约束的数据存储引擎，除了提供事务处理外，InnoDB 还支持行锁，提供和 Oracle 一样的一致性的不加锁读取，能增加并发读的用户数量并提高性能，不会增加锁的数量。InnoDB 的设计目标是处理大容量数据时最大化性能，它的 CPU 利用率是其他所有基于磁盘的关系数据库引擎中最有效率的。</span></div><UL><LI class=list_title><SPAN>2010/11/13 8:51:33</SPAN><a href="../201011/dba_1091.htm"  title="动态加载Innodb Plugin ">动态加载Innodb Plugin </a>  <LI   class="text">曾经写过一篇关于xtradb的体验篇的文章，里面曾提到我们可以动态将xtradb加载到运行的mysql中;mysql中引擎我们都可以把它看作是一个个功能各异的插件（plugin），可以根据需要来加载卸载禁用启用，相当的方便灵活，只要你想你也可以写自己的engine，然后把它加载进来，而这个plugin也是正是mysql独特的地方所在。当初也就是那么一提，并没有具体操作怎么就动态把一个plugin加<a href="../201011/dba_1091.htm" title="动态加载Innodb Plugin ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：zhang</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2011/3/30 13:59:16</SPAN><a href="../201103/dba_1071.htm"  title="InnoDB的多版本一致性读的实现 ">InnoDB的多版本一致性读的实现 </a>  <LI   class="text">innodb是支持mvcc多版本一致性读的，因此和其他实现了mvcc的系统如oracle，postgresql一样，读不会阻塞写，写也不会阻塞读。虽然同样是mvcc，各家的实现是不太一样的。oracle通过在block头部的事务列表，和记录中的锁标志位，加上回滚段，个人认为实现上是最优雅的方式。 而postgresql则更是将多个版本的数据都放在表中，而没有单独的回滚段，导致的一个结果是回滚非常快<a href="../201103/dba_1071.htm" title="InnoDB的多版本一致性读的实现 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：NinGoo</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2011/6/20 13:39:35</SPAN><a href="../201106/dba_1049.htm"  title="xtrabackup知多少 ">xtrabackup知多少 </a>  <LI   class="text">最近小弄下percona xtrabackup，写脚本做测试，对这个世界唯一的开源免费（the world’s only open-source free）mysql（the world’s most popular open source databases这句我也很喜欢 lol:）热备工具有了一些懵懂的认识，对于付费的innodb hot backup我们有了更欢乐的选择。percona xt<a href="../201106/dba_1049.htm" title="xtrabackup知多少 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：zhang</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2011/6/23 13:30:01</SPAN><a href="../201106/dba_1045.htm"  title="10个PHP开发者常犯的MySQL错误 ">10个PHP开发者常犯的MySQL错误 </a>  <LI   class="text">数据库是web大多数应用开发的基础。如果你是用php，那么大多数据库用的是mysql-也是lamp架构的重要部分。php看起来很简单，一个初学者也可以几个小时内就能开始写函数了。但是建立一个稳定、可靠的数据库确需要时间和经验。下面就是一些这样的经验，不仅仅是mysql，其他数据库也一样可以参考。1、使用myisam而不是innodbmysql有很多的数据库引擎，单一般也就用myisam和innod<a href="../201106/dba_1045.htm" title="10个PHP开发者常犯的MySQL错误 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：RockUX</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2011/6/30 13:51:31</SPAN><a href="../201106/dba_1041.htm"  title="mysql索引浅析 ">mysql索引浅析 </a>  <LI   class="text">谈起索引，首先简单的介绍一下mysql的存储引擎。mysql有多种存储引擎，像myisam、innodb、merge、memory(heap)、bdb(berkeleydb)、example、federated、archive、csv、blackhole。当然，您可以先看一下您当前版本的mysql都提供哪些存储引擎：mysql&gt; show engines;+――――+―――-+―――――――<a href="../201106/dba_1041.htm" title="mysql索引浅析 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：lingxi</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2011/7/14 23:49:52</SPAN><a href="../201107/dba_1039.htm"  title="Innodb Crash Recovery恢复时间的飞跃 ">Innodb Crash Recovery恢复时间的飞跃 </a>  <LI   class="text">之前没经历过漫长的crash recovery恢复过程，一是本身库中的数据量就不大，平时的业务量就不是很高，二是innodb_buffer_pool_size和innodb_log_file_size的大小平时设置的也不大。所以，对于意外导致innodb自动恢复时，经历的等待时间的长短没有什么深刻的体会。在浏览peter很早以前的文章时，看到当时大家是多么的无奈和痛苦，同时，在innodb没有对其<a href="../201107/dba_1039.htm" title="Innodb Crash Recovery恢复时间的飞跃 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：zhang</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2011/7/24 15:13:32</SPAN><a href="../201107/dba_1031.htm"  title="快速预热Innodb Buffer Pool的方法 ">快速预热Innodb Buffer Pool的方法 </a>  <LI   class="text">当innodb_buffer_pool_size大到几十gb或是百gb的时候，因为某些日常升级更新或是意外宕机，而必须要重新启动mysqld服务的之后，就面临一个问题，如何将之前频繁访问的数据重新加载回buffer中，也就是说，如何对innodb buffer pool进行预热，以便于快速恢复到之前的性能状态。如果是光靠innodb本身去预热buffer，将会是一个不短的时间周期，业务高峰时，数据<a href="../201107/dba_1031.htm" title="快速预热Innodb Buffer Pool的方法 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：zhang</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2011/7/30 21:43:33</SPAN><a href="../201107/dba_1030.htm"  title="使用Percona Xtrabackup备份SLAVE数据 ">使用Percona Xtrabackup备份SLAVE数据 </a>  <LI   class="text">现在我们可以很方便的用xtrabackup取代ibbackup，作为innodb的在线热备工具使用。 通常，我们会选择在slave上进行备份，以减小master的压力。 innobackupex是封装后的perl脚本，用于调度xtrabackup进行备份，附加了不少辅助功能，非常实用，下面是一个常见的innobackupex备份例子： ###### innobackupex example####<a href="../201107/dba_1030.htm" title="使用Percona Xtrabackup备份SLAVE数据 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：yejr</SPAN>  </LI></UL>
                            </div>
                            <div class="sabrosus"><a href='zt_14_1.htm' title='回到第一页'>首页</a><a href='zt_14_6.htm' title='上一页'>上一页</a><a>...</a><a href='zt_14_3.htm' title='第3页'>3</a><a href='zt_14_4.htm' title='第4页'>4</a><a href='zt_14_5.htm' title='第5页'>5</a><a href='zt_14_6.htm' title='第6页'>6</a><span class="current">7</span><a href='zt_14_8.htm' title='第8页'>8</a><a href='zt_14_9.htm' title='第9页'>9</a><a href='zt_14_10.htm' title='第10页'>10</a><a href='zt_14_11.htm' title='第11页'>11</a><a href='zt_14_8.htm' title='下一页'>下一页</a><a href='zt_14_11.htm' title='尾页'>尾页</a><input type="hidden" value="7" id="page">&nbsp;&nbsp;<strong>分页：7/11页</strong></div>         
            </div>        
        </div>
<!-- end #mainContent --></div>
	<!-- 这个用于清除浮动的元素应当紧跟 #mainContent div 之后，以便强制 #container div 包含所有的子浮动 -->
	<br class="clearfloat" />

      
   
	<div id="footer">
  <ul class="green_1">		<li><div id="slogo"></div></li>		<li><div id="bline"></div></li>		<li><div id="binfo">网站名称：数据库DBA学习网站 www.580top.com<br />网络维护：51ak(微信:sohu91) <br /></div></li>	</ul>
	
   <script charset="UTF-8" id="LA_COLLECT" src="//sdk.51.la/js-sdk-pro.min.js"></script>
<script>LA.init({id:"K2Iiv8isAYH4TLPh",ck:"K2Iiv8isAYH4TLPh"})</script>
  <!-- end #footer --></div>
<!-- end #container --></div>
</body>
</html>
