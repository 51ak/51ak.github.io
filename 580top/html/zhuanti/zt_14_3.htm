<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>专题报道：《存储引擎InnoDB》 - 数据库管理员DBA学习网站 </title>
<link href="../../img/main.css" rel="stylesheet" type="text/css" />
<script src="../../img/daohang.js" type="text/javascript"></script>
</head>

<body>


<div id="container">
  <div id="header">
<div class="dh-logo cls"> <div class="dh-logo-logo" ><a href="#"><img src="../../img/logo.gif" alt="数据库管理员DBA学习网站  LOGO"  width="251" height="58" /></a></div><div class="dh-logo-ac" id="topbar"><div class="dh-logo-nav">    <span class="f_black">Tips</span>： 亲爱的<span class="f_333" title="注：网站的访客">GUEST</span>用户，系统已为你<span class="f_333" title="注：不解释">GRANT</span>了<span class="f_333" title="注：可以查看网站上的所有文章">SELECT</span>,<a href="/add.aspx" title="注：可以发表文章" rel="nofollow">INSERT</a> 权限 </div> </div></div>
<div id="topMain"><div id="top"><ul class="nav"><li><a href="../../index.htm">网站首页</a></li><li><a  href="../sqlserver/l_1_1.htm" title="SQLServer">SQLServer</a></li><li><a  href="../Oracle/l_7_1.htm" title="Oracle">Oracle</a></li><li><a  href="../mysql/l_13_1.htm" title="MySQL">MySQL</a></li><li><a  href="../othersql/l_19_1.htm" title="其他数据库">其他数据库</a></li><li><a  href="../yunwei/l_26_1.htm" title="系统运维">系统运维</a></li><li><a  href="../kaoshi/l_34_1.htm" title="DBA考试">DBA考试</a></li><li><a  href="../dbahuati/l_39_1.htm" title="DBA话题">DBA话题</a></li><li><a href="../zt/l_index_1.htm" class="hover">网站专题</a></li></ul><ul class="sub"><li><a  href="../zt/l_sqlserver_1.htm" title="SQLServer专题">SQLServer</a>|</li><li><a  href="../zt/l_Oracle_1.htm" title="Oracle专题">Oracle</a>|</li><li><a  href="../zt/l_mysql_1.htm" title="MySQL专题">MySQL</a>|</li><li><a  href="../zt/l_othersql_1.htm" title="其他数据库专题">其他数据库</a>|</li><li><a  href="../zt/l_yunwei_1.htm" title="系统运维专题">系统运维</a>|</li><li><a  href="../zt/l_kaoshi_1.htm" title="DBA考试专题">DBA考试</a>|</li><li><a  href="../zt/l_dbahuati_1.htm" title="DBA话题专题">DBA话题</a>|</li></ul></div></div>
<br class="clearfloat" />
</div>
 
 
    <div class="local_daohang">您现在的位置: <a href="../../">首页</a> &nbsp;&gt;&nbsp;<a href="../zt/l_index_1.htm">网站专题</a>&nbsp;&gt;&nbsp; <a href="../zt/l_mysql_1.htm">MySQL</a>&nbsp;&gt;&nbsp;<a href="zt_14_1.htm">存储引擎InnoDB</a></div>
  <div id="sidebar1">

  <div class='div_tab_tab'>
	<div id="div_login_title">580top数据库:</div>
          <div id="div_login"> <iframe src="../../page/login.html" frameBorder="0" width="100%"  scrolling="no" height="190"></iframe>  
 &nbsp;</div>    
  </div>
    
  
   <div  class='div_tab_tab'>
  <div id="div_ran" > <span>【在线问答】</span><br /><a href="#" >[{类型}] {题干，这里会显示问题的标题}<br />点击进入答题>></a>
	</div>
  </div>
  
   
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
    <div class="d9"><p>&nbsp;</p></div>
    <p>&nbsp;</p>
    <p>&nbsp;</p>


    <div class="d3"><p>&nbsp;</p></div>
    
    <p>&nbsp;</p>
    <!-- end #sidebar1 --></div>
  <div id="mainContent">
  

        <div id="contentdiv"> 
            <div id="news_list">
                   <div>
                              <div class="d2"><h1>专题报道：《存储引擎InnoDB》</h1><span>InnoDB 是 MySQL 上第一个提供外键约束的数据存储引擎，除了提供事务处理外，InnoDB 还支持行锁，提供和 Oracle 一样的一致性的不加锁读取，能增加并发读的用户数量并提高性能，不会增加锁的数量。InnoDB 的设计目标是处理大容量数据时最大化性能，它的 CPU 利用率是其他所有基于磁盘的关系数据库引擎中最有效率的。</span></div><UL><LI class=list_title><SPAN>2009/11/18 9:26:50</SPAN><a href="../200911/dba_1249.htm"  title="InnoDB线程并发检查机制 ">InnoDB线程并发检查机制 </a>  <LI   class="text">innodb在接受mysql线程调用能时，有一个并发线程的检查机制，通过innodb_thread_concurrency参数进行控制。如果参数设置大于0，则表示检查机制开启，允许进入的线程数就是参数的值。等于0则禁用并发检查。在新的mysql线程调用innodb接口前，innodb会检查已经接受的请求线程数，如已经超过innodb_thread_concurrency设置的限制，则该请求线程会等<a href="../200911/dba_1249.htm" title="InnoDB线程并发检查机制 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：NinGoo</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/11/18 13:15:21</SPAN><a href="../200911/dba_1248.htm"  title="多版本并发控制：PostgreSQL vs InnoDB ">多版本并发控制：PostgreSQL vs InnoDB </a>  <LI   class="text">多版本并发控制技术被很多数据库或存储引擎采用，如oracle，ms sql server 2005+, postgresql, firebird, innodb, falcon, pbxt, maria等等。新的数据库存储引擎，几乎毫无例外的使用多版本而不是单版本加锁的方法实现并发控制，可以说多版本已经成为未来的发展趋势。虽然都是多版本，但不同的系统的实现却有很大不同。在开源数据库领域最负盛名的两<a href="../200911/dba_1248.htm" title="多版本并发控制：PostgreSQL vs InnoDB ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：风轻扬</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/11/30 9:05:46</SPAN><a href="../200911/dba_1237.htm"  title="Innodb共享表空间VS独立表空间 ">Innodb共享表空间VS独立表空间 </a>  <LI   class="text">在使用innodb引擎时将要面对两种表空间的管理选择的问题，innodb有两种管理表空间的方法：1． 共享表空间（也可以拆分成多个小的表空间）2． 独立表空间每一个表有一个独立的表空间。我个人推荐使用独立表空间。在性能和运维上独立表空间比共享的表空间有很多优势。下面我将分别说明一下两种表空间管理的特点。共享表空间：优点：可以放表空间分成多个文件存放到各个磁盘上（表空间文件大小不受表大小的限制，如一<a href="../200911/dba_1237.htm" title="Innodb共享表空间VS独立表空间 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：wubx</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/11/30 20:20:46</SPAN><a href="../200911/dba_1232.htm"  title="推荐使用innodb_plugin ">推荐使用innodb_plugin </a>  <LI   class="text"> innodb-plugin 出现差不多有一年了。从功能上性能上都表现的不错。自mysql-5.1.38后发行的版本中已包括了该功能。（推荐使用mysql-5.1.40)http://dev.mysql.com/doc/refman/5.1/en/innodb.htmlhttp://planet.mysql.com/entry/?id=20926该版本的特性:http://www.innodb.c<a href="../200911/dba_1232.htm" title="推荐使用innodb_plugin ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：wubx</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/12/7 13:25:09</SPAN><a href="../200912/dba_1230.htm"  title="InnoDB的”替代品”：Percona XtraDB ">InnoDB的”替代品”：Percona XtraDB </a>  <LI   class="text">关于xtradb是percona team在innodb的基础上开发出来的一个更加强大的存储引擎，它百分百的兼容innodb，我们可以用xtradb来替代为mysql的发展做出历史性贡献的innodb，新的xtradb引擎将具有更加强大的性能优势，以及良好的扩展性和一些新特性。percona于2008年12月16日正式对外公布percona xtradb存储引擎，当时版本为1.0.2-1。在09年<a href="../200912/dba_1230.htm" title="InnoDB的”替代品”：Percona XtraDB ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：zhang</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/12/10 22:22:03</SPAN><a href="../200912/dba_1229.htm"  title="MySQL修改库名 ">MySQL修改库名 </a>  <LI   class="text">如果是myisam的话.只要修改data目录下面的那个库名的文件夹的名字就ok了如果是innodb的话.其实是无法修改库名的.网上瞎咧咧的什么rename database或者alter database都是不行的一种方法是比较保守的.直接把老库的内容mysqldump到新库里面还有一种类似上面方法.先alter table 的存储引擎到myisam,然后改了库目录的名字,然后再改回来innodb<a href="../200912/dba_1229.htm" title="MySQL修改库名 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：Johnny Woo</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/12/13 18:04:08</SPAN><a href="../200912/dba_1226.htm"  title="更改Innodb 数据页大小优化MySQL ">更改Innodb 数据页大小优化MySQL </a>  <LI   class="text"> 我们知道innodb的数据页是16k,而且是一个硬性的规定，系统里没更改的办法，希望将来mysql也能也oracle一样支持多种数据页的大小。但实际应用中有时16k显的有点大了，特别是很多业务在oracle或是sql server运行的挺好的情况下迁到了mysql上发现io增长太明显的情况下，就会想到更改数据页大小了。　　实际上innodb的数据页大小也是可以更改的，只是需要在源码层去更改，然后<a href="../200912/dba_1226.htm" title="更改Innodb 数据页大小优化MySQL ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：wubx</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/12/13 18:04:43</SPAN><a href="../200912/dba_1225.htm"  title="Innodb如何使用内存 ">Innodb如何使用内存 </a>  <LI   class="text">来源：http://www.mysqlperformanceblog.com/2006/05/30/innodb-memory-usage/译这个文章的目的：　　最近经常被问起innodb是如何使用内存的。该问题早已被原mysql公司的vadim论证过。我这里译一下他的文章供大家参考。开始：　　这里有许多关于innodb如何使用内存的问题。我这里将会以innodb启动时的分配情况做一个解释。一些重<a href="../200912/dba_1225.htm" title="Innodb如何使用内存 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="14" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：wubx</SPAN>  </LI></UL>
                            </div>
                            <div class="sabrosus"><a href='zt_14_1.htm' title='回到第一页'>首页</a><a href='zt_14_2.htm' title='上一页'>上一页</a><a href='zt_14_1.htm' title='第1页'>1</a><a href='zt_14_2.htm' title='第2页'>2</a><span class="current">3</span><a href='zt_14_4.htm' title='第4页'>4</a><a href='zt_14_5.htm' title='第5页'>5</a><a href='zt_14_6.htm' title='第6页'>6</a><a href='zt_14_7.htm' title='第7页'>7</a><a>...</a><a href='zt_14_4.htm' title='下一页'>下一页</a><a href='zt_14_11.htm' title='尾页'>尾页</a><input type="hidden" value="3" id="page">&nbsp;&nbsp;<strong>分页：3/11页</strong></div>         
            </div>        
        </div>
<!-- end #mainContent --></div>
	<!-- 这个用于清除浮动的元素应当紧跟 #mainContent div 之后，以便强制 #container div 包含所有的子浮动 -->
	<br class="clearfloat" />

      
   
	<div id="footer">
  <ul class="green_1">		<li><div id="slogo"></div></li>		<li><div id="bline"></div></li>		<li><div id="binfo">网站名称：数据库DBA学习网站 www.580top.com<br />网络维护：51ak(微信:sohu91) <br /></div></li>	</ul>
	
   <script charset="UTF-8" id="LA_COLLECT" src="//sdk.51.la/js-sdk-pro.min.js"></script>
<script>LA.init({id:"K2Iiv8isAYH4TLPh",ck:"K2Iiv8isAYH4TLPh"})</script>
  <!-- end #footer --></div>
<!-- end #container --></div>
</body>
</html>
