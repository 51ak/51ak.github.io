<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>基础知识_MySQL_数据库管理员DBA学习网站 _第40页</title>
<link href="../../img/main.css" rel="stylesheet" type="text/css" />
<script src="../../img/daohang.js" type="text/javascript"></script>
</head>

<body>


<div id="container">
  <div id="header">
<div class="dh-logo cls"> <div class="dh-logo-logo" ><a href="#"><img src="../../img/logo.gif" alt="数据库管理员DBA学习网站  LOGO"  width="251" height="58" /></a></div><div class="dh-logo-ac" id="topbar"><div class="dh-logo-nav">    <span class="f_black">Tips</span>： 亲爱的<span class="f_333" title="注：网站的访客">GUEST</span>用户，系统已为你<span class="f_333" title="注：不解释">GRANT</span>了<span class="f_333" title="注：可以查看网站上的所有文章">SELECT</span>,<a href="/add.aspx" title="注：可以发表文章" rel="nofollow">INSERT</a> 权限 </div> </div></div>
<div id="topMain"><div id="top"><ul class="nav"><li><a href="../../index.htm">网站首页</a></li><li><a  href="../sqlserver/l_1_1.htm" title="SQLServer">SQLServer</a></li><li><a  href="../Oracle/l_7_1.htm" title="Oracle">Oracle</a></li><li><a href="../mysql/l_13_1.htm" class="hover"　title="MySQL">MySQL</a></li><li><a  href="../othersql/l_19_1.htm" title="其他数据库">其他数据库</a></li><li><a  href="../yunwei/l_26_1.htm" title="系统运维">系统运维</a></li><li><a  href="../kaoshi/l_34_1.htm" title="DBA考试">DBA考试</a></li><li><a  href="../dbahuati/l_39_1.htm" title="DBA话题">DBA话题</a></li></ul><ul class="sub"><li><a  href="../mysqlzhishi/l_14_1.htm" title="MySQL基础知识"><span class="zc_666">基础知识</span></a>|</li><li><a  href="../mysqlha/l_15_1.htm" title="MySQL高可用性和HA">高可用性和HA</a>|</li><li><a  href="../mysqlyouhua/l_16_1.htm" title="MySQL性能与优化">性能与优化</a>|</li><li><a  href="../mysqlguzhang/l_17_1.htm" title="MySQL故障与解决">故障与解决</a>|</li><li><a  href="../mysqlyuanma/l_18_1.htm" title="MySQL源码解读">源码解读</a>|</li></ul></div></div>
<br class="clearfloat" />
</div>
 
 
    <div class="local_daohang">您现在的位置: <a href="../../">首页</a> &nbsp;&gt;&nbsp;<a href="../mysql/l_13_1.htm">MySQL</a>&nbsp;&gt;&nbsp;<a href="../mysqlzhishi/l_14_1.htm">基础知识</a></div>
  <div id="sidebar1">

  <div class='div_tab_tab'>
	<div id="div_login_title">580top数据库:</div>
          <div id="div_login"> <iframe src="../../page/login.html" frameBorder="0" width="100%"  scrolling="no" height="190"></iframe>  
 &nbsp;</div>    
  </div>
    
  
   <div  class='div_tab_tab'>
  <div id="div_ran" > <span>【在线问答】</span><br /><a href="#" >[{类型}] {题干，这里会显示问题的标题}<br />点击进入答题>></a>
	</div>
  </div>
  
   
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
    <div class="d9"><p>&nbsp;</p></div>
    <p>&nbsp;</p>
    <p>&nbsp;</p>


    <div class="d3"><p>&nbsp;</p></div>
    
    <p>&nbsp;</p>
    <!-- end #sidebar1 --></div>
  <div id="mainContent">
  

        <div id="contentdiv"> 
            <div id="news_list">
                   <div>
                              <UL><LI class=list_title><SPAN>2009/10/20 9:44:13</SPAN><a href="../200910/dba_1289.htm"  title="高效的MySQL分页 ">高效的MySQL分页 </a>  <LI   class="text">percona performance conference 2009上，来自雅虎的几位工程师带来了一篇”efficient pagination using mysql“的报告，有很多亮点，本文是在原文基础上的进一步延伸。首先看一下分页的基本原理：mysql&gt; explain select * from message order by id desc limit 10000, 20\\g<a href="../200910/dba_1289.htm" title="高效的MySQL分页 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：</SPAN><SPAN>作者：付超群</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/10/19 23:22:05</SPAN><a href="../200910/dba_1296.htm"  title="数据不算大，备份却非常慢 ">数据不算大，备份却非常慢 </a>  <LI   class="text">问题环境硬件：dell 1950, 146g sas 15k rpms * 2, 8g ram软件：2.6.9-55.elsmp x86_64, mysql 5.1.x现象2个库，其中1个业务库下有20多个表，表文件大小总量不到2g。另一个为日志库，下400多个表，大致是每天会产生5个表，其中有一个表较大，约400mb，总量约40多gb。每次备份耗时较长，最严重的一次花了5个多小时才完成。业务库为<a href="../200910/dba_1296.htm" title="数据不算大，备份却非常慢 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：</SPAN><SPAN>作者：yejr</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/10/19 15:45:38</SPAN><a href="../200910/dba_1297.htm"  title="show engine innodb status显示信息不全? ">show engine innodb status显示信息不全? </a>  <LI   class="text">问题：执行 show engine innodb status\\g 时，显示的信息不全，deadlock相关信息太多，后面的都没了原因：这是mysql客户端的一个bug：bug#19825，交互式客户端限制了输出信息最大为 64kb，因此更多的信息无法显示。解决办法：解决方法有两种：1. 启用 innodb_status_file修改 my.cnf，增加类似下面一行innodb_status_f<a href="../200910/dba_1297.htm" title="show engine innodb status显示信息不全? ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="../zhuanti/zt_14_1.htm" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：yejr</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/10/19 15:45:16</SPAN><a href="../200910/dba_1298.htm"  title="无需过分关注Created_tmp_disk_tables ">无需过分关注Created_tmp_disk_tables </a>  <LI   class="text">通常地，我们习惯以 created_tmp_tables/(created_tmp_disk_tables + created_tmp_tables) 或者已各自的一个时段内的差额计算，来判断基于内存的临时表利用率。所以，我们会比较关注 created_tmp_disk_tables 是否过多，从而认定当前服务器运行状况的优劣。而事实上，我们并没有必要太过分的关注 created_tmp_disk<a href="../200910/dba_1298.htm" title="无需过分关注Created_tmp_disk_tables ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：</SPAN><SPAN>作者：yejr</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/10/18 23:13:10</SPAN><a href="../200910/dba_1300.htm"  title="innodb_flush_method 与 Linux File I/O ">innodb_flush_method 与 Linux File I/O </a>  <LI   class="text">陶方在《innodb_flush_method带来的性能影响》中从实验角度比较了fdatasync，o_dsync和o_direct在性能上的差异。本文将试图从linux/unix”文件i/o”（unbuffered i/o）的角度来解释innodb_flush_method是如何影响mysql的i/o。【附录1】innodb_flush_log_at_trx_commit参数确定日志文件何时wr<a href="../200910/dba_1300.htm" title="innodb_flush_method 与 Linux File I/O ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="../zhuanti/zt_14_1.htm" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：苏普</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/10/18 11:10:16</SPAN><a href="../200910/dba_1305.htm"  title="InnoDB之Dirty Page、Redo log ">InnoDB之Dirty Page、Redo log </a>  <LI   class="text">在innodb中，buffer pool里面的dirty page一方面可以加快数据处理速度，同时也会造成数据的不一致(ram vs disk)。本文介绍了dirty page是如何产生，以及innodb如何利用redo log如何消除dirty page产生的数据不一致。当事务(transaction)需要修改某条记录（row）时，innodb需要将该数据所在的page从disk读到buffer<a href="../200910/dba_1305.htm" title="InnoDB之Dirty Page、Redo log ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：<a href="../zhuanti/zt_14_1.htm" title="《存储引擎InnoDB》专题">存储引擎InnoDB</a></SPAN><SPAN>作者：苏普</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/10/18 11:08:06</SPAN><a href="../200910/dba_1307.htm"  title="Query Cache，看上去很美 ">Query Cache，看上去很美 </a>  <LI   class="text">当你的数据库打开了query cache（简称qc）功能后，数据库在执行select语句时，会将其结果放到qc中，当下一次处理同样的select请求时，数据库就会从qc取得结果，而不需要去数据表中查询。在这个“cache为王”的时代，我们总是通过不同的方式去缓存我们的结果从而提高响应效率，但一个缓存机制是否有效，效果如何，却是一个需要好好思考的问题。在mysql中的query cache就是一个适<a href="../200910/dba_1307.htm" title="Query Cache，看上去很美 ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：</SPAN><SPAN>作者：苏普</SPAN>  </LI></UL><UL><LI class=list_title><SPAN>2009/10/17 14:25:40</SPAN><a href="../200910/dba_1308.htm"  title="Mysql combine index ">Mysql combine index </a>  <LI   class="text">先说骗子。这年头骗子真多。刚才拨打一个网上搜索的特价飞机订票热线400-6064-***，对方叫我直接去建设银行上汇钱再给出票，还给了一个个人的建设银行账户。明显就是骗子，还好老婆提醒我不贪图小利，警防骗子，不然我真去银行傻汇了。在此提醒大家出行注意安全。oracle的组合索引操作有2种，access和filter,当然access更好。mysql在组合索引上，只有access，没有filter。<a href="../200910/dba_1308.htm" title="Mysql combine index ">[阅读全文]</A>   <LI class="ot"><SPAN>专题：</SPAN><SPAN>作者：yumianfeilong</SPAN>  </LI></UL>
                            </div>
                            <div class="sabrosus"><a href='l_14_1.htm' title='回到第一页'>首页</a><a href='l_14_39.htm' title='上一页'>上一页</a><a>...</a><a href='l_14_36.htm' title='第36页'>36</a><a href='l_14_37.htm' title='第37页'>37</a><a href='l_14_38.htm' title='第38页'>38</a><a href='l_14_39.htm' title='第39页'>39</a><span class="current">40</span><a href='l_14_41.htm' title='第41页'>41</a><a href='l_14_42.htm' title='第42页'>42</a><a href='l_14_43.htm' title='第43页'>43</a><a href='l_14_44.htm' title='第44页'>44</a><a href='l_14_41.htm' title='下一页'>下一页</a><a href='l_14_44.htm' title='尾页'>尾页</a><input type="hidden" value="40" id="page">&nbsp;&nbsp;<strong>分页：40/44页</strong></div>         
            </div>        
        </div>
<!-- end #mainContent --></div>
	<!-- 这个用于清除浮动的元素应当紧跟 #mainContent div 之后，以便强制 #container div 包含所有的子浮动 -->
	<br class="clearfloat" />

      
   
	<div id="footer">
  <ul class="green_1">		<li><div id="slogo"></div></li>		<li><div id="bline"></div></li>		<li><div id="binfo">网站名称：数据库DBA学习网站 www.580top.com<br />网络维护：51ak(微信:sohu91) <br /></div></li>	</ul>
	
   <script charset="UTF-8" id="LA_COLLECT" src="//sdk.51.la/js-sdk-pro.min.js"></script>
<script>LA.init({id:"K2Iiv8isAYH4TLPh",ck:"K2Iiv8isAYH4TLPh"})</script>
  <!-- end #footer --></div>
<!-- end #container --></div>
</body>
</html>
