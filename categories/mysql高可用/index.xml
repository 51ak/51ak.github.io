<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql高可用 on dboop.com</title>
    <link>/categories/mysql%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
    <description>Recent content in mysql高可用 on dboop.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 27 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/mysql%E9%AB%98%E5%8F%AF%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>记一次主从复制错误处理和修复过程(mysql5.7 gtid)</title>
      <link>/post/2019/05/27/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%92%8C%E4%BF%AE%E5%A4%8D%E8%BF%87%E7%A8%8Bmysql5.7-gtid/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/05/27/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%92%8C%E4%BF%AE%E5%A4%8D%E8%BF%87%E7%A8%8Bmysql5.7-gtid/</guid>
      <description>MYSQL的复制会在极端条件下出现主从不一致的问题 原因有很多种,这里记一下比较完整的处理过程 网上的很多处理方法都是基于早期版本的没有GIID环境
stop slave; SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1 ; start slave;  这篇会介绍GIID下的复制错误快速恢复和修复过程
##收到报警 收到报警,一个从节点Slave_SQL_Running状态异常 当时是周末的晚上,看到报警时已经DOWN了10分钟了 联VPN到线上又花了几分钟 上线确认以下信息,确认是有问题
show slave status \G #得到以下关键信息 Last_SQL_Error_Timestamp: 报错时间 Slave_SQL_Running: 报错进程 Slave_SQL_Running_State: 报错信息 Could not execute Delete_rows event on table \*; Can&#39;t find record in &#39;\*&#39;, Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; the event&#39;s master log mysql-bin.002339, end_log_pos 162227594  ##问题已确认,第二步确定影响 因为这个从库已经不同步了,需要保证业务没有影响 show processlist; 发现正常读业务已经被中件间切走了,只有BI的一个业务线因为用了DNS直连没有切走, 比较坑的是这个BI线不确定是谁负责的,但考虑BI应用读脏数据影响不大,就直接把问题交给值班人员让他联系了.(这里提一下,我们只有BI类应用会出现这种问题,业务类的访问已经都对接了具体的人)
##开始尝试修复复制 这里说的尝试修复是快速的修复问题,不能保证100%成功 使用的方法还是跳过报错的事务,使整个复制进行下去
show slave status \G #找关键的Slave_SQL_Running_State 列的Error_code 内容 ,这里面是1032 #查系统表找到这个GTID:ed3e8c5d-b102-11e8-9dbc-1418773c97b3:534249277 并跳过它 select LAST_SEEN_TRANSACTION from performance_schema.</description>
    </item>
    
    <item>
      <title>Mysqlrouter在centos报错open_files_limit1024的限制</title>
      <link>/post/2019/05/03/mysqlrouter%E5%9C%A8centos%E6%8A%A5%E9%94%99open_files_limit1024%E7%9A%84%E9%99%90%E5%88%B6/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/05/03/mysqlrouter%E5%9C%A8centos%E6%8A%A5%E9%94%99open_files_limit1024%E7%9A%84%E9%99%90%E5%88%B6/</guid>
      <description>YUM安装的Mysqlrouter在centos 会有open_files_limit 1024 的限制
运行一段时间会报 limit 用超的报错.查看限制和解决方法如下
查看限制 lsof -p 29198 jps ulimit -a lsof | wc -l  centos6需要编辑如下配置文件 vim /etc/init.d/mysqlrouter 增加以下信息 ulimit -HS -n 65535  然后运行如下命令生效。 service mysqlrouter restart
centos7需要编辑如下配置文件，[Service]下添加以下配置信息 vi /usr/lib/systemd/system/mysqlrouter.service [Service] LimitCORE=infinity LimitNOFILE=65535 LimitNPROC=65535  然后运行如下命令生效。
systemctl daemon-reload systemctl restart mysqlrouter.service</description>
    </item>
    
    <item>
      <title>搭建一套完整的Mysql5.7innodbcluster(GroupReplication&#43;mysqlrouter)</title>
      <link>/post/2017/12/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E5%A5%97%E5%AE%8C%E6%95%B4%E7%9A%84mysql5.7innodbclustergroupreplication-mysqlrouter/</link>
      <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/12/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E5%A5%97%E5%AE%8C%E6%95%B4%E7%9A%84mysql5.7innodbclustergroupreplication-mysqlrouter/</guid>
      <description>先说三个大步骤：
搭Mysql5.7 Group Replication ,配置成单主模式
安装Mysqlshell,配innodbcluster
安装Mysql-router
第一步：搭Mysql5.7 Group Replication ,配置成单主模式
为了节省步骤，我们用RPM方式安装
yum install -y libaio yum install libnuma* -y rpm -qa | grep -i mysql # 这一步找到旧的mysql rpm -e mysql-libs-5.1.73-8.el6_8.x86_64 --nodeps #我测试的实例上只有这个，删了 rpm -ivh mysql-community-common-5.7.20-1.el6.x86_64.rpm rpm -ivh mysql-community-libs-5.7.20-1.el6.x86_64.rpm rpm -ivh mysql-community-devel-5.7.20-1.el6.x86_64.rpm rpm -ivh mysql-community-client-5.7.20-1.el6.x86_64.rpm rpm -ivh mysql-community-libs-compat-5.7.20-1.el6.x86_64.rpm rpm -ivh mysql-community-embedded-5.7.20-1.el6.x86_64.rpm rpm -ivh mysql-community-server-5.7.20-1.el6.x86_64.rpm rpm -qa | grep mysql　#验证  拷贝cnf.和服务文件
cp mysqld33* /etc/init.d/ cp -r mysql33* /home/wokofo/  配置文件：</description>
    </item>
    
  </channel>
</rss>