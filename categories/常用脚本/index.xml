<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>常用脚本 on Classic</title>
    <link>/categories/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/</link>
    <description>Recent content in 常用脚本 on Classic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 07 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常用脚本_PostgreSQL常用命令</title>
      <link>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_postgresql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_postgresql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description> 进入PostgreSQL  su - postgres cd /usr/local/pgsql/bin/ ./psql  看当前端口号  SHOW port;  列出所有数据库  \l  切换数据库  \c dbname  列出当前数据库的所有表  \d  查看指定表的所有字段  \d tablename  查看指定表的基本情况  \d+ tablename  确认是否是主库（false为主）  SELECT pg_is_in_recovery();  有几个从库  SELECT count(*) FROM pg_stat_replication;  查看从库状态  SELECT * FROM pg_stat_replication;  建库  CREATE DATABASE cdt_pg_maxkb;  建用户  CREATE USER pgmaxkb_owner WITH PASSWORD &#39;「password」&#39;;  给权限  GRANT ALL PRIVILEGES ON DATABASE cdt_pg_maxkb TO pgmaxkb_owner;  数据库的连接信息  select * from pg_stat_activity </description>
    </item>
    
    <item>
      <title>MySQL创建远程链接服务器LinkServer步骤</title>
      <link>/mysql/mysql%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E9%93%BE%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8linkserver%E6%AD%A5%E9%AA%A4/</link>
      <pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/mysql/mysql%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E9%93%BE%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8linkserver%E6%AD%A5%E9%AA%A4/</guid>
      <description>环境准备  执行show engines;   mysql&amp;gt; show engines; +--------------------+---------+----------------------------------------------------------------+--------------+------+------------+ | Engine | Support | Comment | Transactions | XA | Savepoints | +--------------------+---------+----------------------------------------------------------------+--------------+------+------------+ | FEDERATED | NO | Federated MySQL storage engine | NULL | NULL | NULL | | MEMORY | YES | Hash based, stored in memory, useful for temporary tables | NO | NO | NO | | InnoDB | DEFAULT | Supports transactions, row-level locking, and foreign keys | YES | YES | YES | | PERFORMANCE_SCHEMA | YES | Performance Schema | NO | NO | NO | | MyISAM | YES | MyISAM storage engine | NO | NO | NO | | MRG_MYISAM | YES | Collection of identical MyISAM tables | NO | NO | NO | | BLACKHOLE | YES | /dev/null storage engine (anything you write to it disappears) | NO | NO | NO | | CSV | YES | CSV storage engine | NO | NO | NO | | ARCHIVE | YES | Archive storage engine | NO | NO | NO | +--------------------+---------+----------------------------------------------------------------+--------------+------+------------+ 9 rows in set (0.</description>
    </item>
    
    <item>
      <title>MySQL压力测试之MySQLslap</title>
      <link>/mysql/mysql%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E4%B9%8Bmysqlslap/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>/mysql/mysql%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E4%B9%8Bmysqlslap/</guid>
      <description>使用语法如下： mysqlslap [options] 参数 [options]  &amp;ndash;auto-generate-sql, -a 自动生成测试表和数据，表示用mysqlslap工具自己生成的SQL脚本来测试并发压力。 &amp;ndash;auto-generate-sql-load-type=type 测试语句的类型。代表要测试的环境是读操作还是写操作还是两者混合的。取值包括：read，key，write，update和mixed(默- 认)。 &amp;ndash;auto-generate-sql-add-auto-increment 代表对生成的表自动添加auto_increment列，从5.1.18版本开始支持。 &amp;ndash;number-char-cols=N, -x N 自动生成的测试表中包含多少个字符类型的列，默认1 &amp;ndash;number-int-cols=N, -y N 自动生成的测试表中包含多少个数字类型的列，默认1 &amp;ndash;number-of-queries=N 总的测试查询次数(并发客户数×每客户查询次数) &amp;ndash;query=name,-q 使用自定义脚本执行测试，例如可以调用自定义的一个存储过程或者sql语句来执行测试。 &amp;ndash;create-schema 代表自定义的测试库名称，测试的schema，MySQL中schema也就是database。 &amp;ndash;commint=N 多少条DML后提交一次。 &amp;ndash;compress, -C 如果服务器和客户端支持都压缩，则压缩信息传递。 &amp;ndash;concurrency=N, -c N 表示并发量，也就是模拟多少个客户端同时执行select。可指定多个值，以逗号或者&amp;ndash;delimiter参数指定的值做为分隔符。例如：- &amp;ndash;concurrency=100,200,500。 &amp;ndash;engine=engine_name, -e engine_name 代表要测试的引擎，可以有多个，用分隔符隔开。例如：&amp;ndash;engines=myisam,innodb。 &amp;ndash;iterations=N, -i N 测试执行的迭代次数，代表要在不同并发环境下，各自运行测试多少次。 &amp;ndash;only-print 只打印测试语句而不实际执行。 &amp;ndash;detach=N 执行N条语句后断开重连。 &amp;ndash;debug-info, -T 打印内存和CPU的相关信息。  优点：  可以针对某些特定类型的语句进行测试， 例如：  mysqlslap --no-defaults -h 127.0.0.1 -P 3307 --query=敏感列无索引where查询.sql --create-schema=db_test --concurrency=10,20 mysqlslap --no-defaults -h 127.</description>
    </item>
    
    <item>
      <title>常用脚本_grep,sed,awk,find命令</title>
      <link>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_grepsedawkfind%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_grepsedawkfind%E5%91%BD%E4%BB%A4/</guid>
      <description>grep ##zcat 是用于查看压缩的文件 ##gzip 套件包含许多可以 “在原地” 处理压缩文件的实用程序。zcat、zgrep、zless、zdiff 等实用程序的作用分别与 cat、grep、less 和 diff 相同，但是它们操作压缩的文件。 zcat web.log.gz | grep aqzt.com | head ###Grep &#39;OR&#39; 或操作 grep &amp;quot;pattern1\|pattern2&amp;quot; file.txt grep -E &amp;quot;pattern1|pattern2&amp;quot; file.txt grep -e pattern1 -e pattern2 file.txt egrep &amp;quot;pattern1|pattern2&amp;quot; file.txt awk &#39;/pattern1|pattern2/&#39; file.txt sed -e &#39;/pattern1/b&#39; -e &#39;/pattern2/b&#39; -e d file.txt #找出文件（filename）中包含123或者包含abc的行 grep -E &#39;123|abc&#39; filename #用egrep同样可以实现 egrep &#39;123|abc&#39; filename #awk 的实现方式 awk &#39;/123|abc/&#39; filename ###Grep &#39;AND&#39; 与操作 grep -E &#39;pattern1.*pattern2&#39; file.txt # in that order grep -E &#39;pattern1.</description>
    </item>
    
    <item>
      <title>常用脚本_scp和rsync</title>
      <link>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_scp%E5%92%8Crsync/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_scp%E5%92%8Crsync/</guid>
      <description>scp 从本地复制到远程 在本地服务器上将/data/mysqlbackup目录下所有的文件传输到服务器10.0.0.2的/data/mysqlbackup目录下，命令为：
scp -r /data/mysqlbackup root@10.0.0.2:/data/mysqlbackup
从远程复制到本地 在本地服务器上操作，将服务器10.0.0.2上/data/mysqlbackup/目录下所有的文件全部复制到本地的/root目录下，命令为： scp -r root@10.0.0.2:/data/mysqlbackup /root
rsync  time=$(date &#39;+%Y-%m-%d-%H-test1_binlog.0001&#39;) time1=$(date &#39;+%Y-%m-%d-%H-test2_binlog.0001&#39;) #cp /data/mysqlbackup/log/test1_binlog.0001 /data/mysqlbackup/log/$time #cp /data/mysqlbackup/log/test2_binlog.0001 /data/mysqlbackup/log/$time1 /usr/bin/rsync -av --bwlimit=10000 /data/mysqlbackup/log/test1_binlog.0001 /data/mysqlbackup/log/$time /usr/bin/rsync -av --bwlimit=10000 /data/mysqlbackup/log/test2_binlog.0001 /data/mysqlbackup/log/$time1 cat /dev/null &amp;gt; /data/mysqlbackup/log/test1_binlog.0001 cat /dev/null &amp;gt; /data/mysqlbackup/log/test2_binlog.0001 find /data/mysqlbackup/log/ -ctime +5 -exec rm -f {} \; ##剪切参考，IO速度限制的cp和mv(限速1024 KB/s) ##cp: rsync --bwlimit=1024 {src} {dest} ##mv: rsync --bwlimit=1024 --remove-source-files {src} {dest} ##使用ssh方式rsync，不用服务端，简单方便，SSH需要认证，就不用每次输入密码 #ssh-keygen -t rsa -N &#39;&#39; -f ~/.</description>
    </item>
    
    <item>
      <title>常用脚本_ssh无密码认证(linux互信)</title>
      <link>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_ssh%E6%97%A0%E5%AF%86%E7%A0%81%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_ssh%E6%97%A0%E5%AF%86%E7%A0%81%E8%AE%A4%E8%AF%81/</guid>
      <description>A机添加B机ssh信任 # B机执行 ssh-keygen -t rsa 一路回车 cat /root/.ssh/idrsa.pub # A机执行 vim /root/.ssh/authorized_keys 将B机的pub信息加入 ssh ssh-keygen -t rsa -N &amp;quot;&amp;quot; -f ~/.ssh/id_rsa -q -b 2048 -C &amp;quot;test@ppabc.cn&amp;quot; ssh无密码认证 RSA ssh-keygen -t rsa cat ~/.ssh/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys ssh无密码认证 DSA ssh-keygen -t dsa -P &#39;&#39; -f ~/.ssh/id_dsa cat ~/.ssh/id_dsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys 查看生产的密匙 cat ~/.ssh/id_dsa
用ssh -v 显示详细的登陆信息查找原因： ssh -v localhost 拷贝本地生产的key到远程服务器端（两种方法）  方法1  cat ~/.ssh/id_dsa.pub | ssh 远程用户名@远程服务器ip &#39;cat - &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>常用脚本_iptables</title>
      <link>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_iptables/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_iptables/</guid>
      <description>安装和启动 systemctl status iptables yum install iptables-services systemctl start iptables #启动 systemctl status iptables #查看运行状态 systemctl restart iptables.service #重启 systemctl stop iptables.service #停止 systemctl enable iptables.service #设置开机启动 systemctl disable iptables.service #禁止开机启动 常用命令 iptables -h #查询帮助 iptables -L -n #列出（filter表）所有规则 iptables -L -n --line-number #列出（filter表）所有规则，带编号 iptables -L -n -t nat #列出（nat表）所有规则 iptables -F #清除（filter表）中所有规则 iptables -F -t nat #清除（nat表）中所有规则 service iptables save #保存配置（保存配置后必须重启iptables） systemctl restart iptables.service #重启 查看： iptables -L -n --line-number iptables -t nat -A PREROUTING -p tcp -d 127.</description>
    </item>
    
    <item>
      <title>常用脚本_date和time</title>
      <link>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_time/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_time/</guid>
      <description>日期加减  ####昨天日期（1天以前） date -d last-day +%Y-%m-%d date -d &amp;quot;1 days ago&amp;quot; +%Y-%m-%d date -d &#39;-1 days&#39; +%Y-%m-%d ####下周一日期 date -d &#39;next monday&#39; +%Y-%m-%d ####明天日期 date -d next-day +%Y-%m-%d date -d &#39;1 days&#39; +%Y-%m-%d ####前天 （2天以前） ‘n days ago&#39; 表示n天前的那一天 date -d &amp;quot;2 days ago&amp;quot; +%Y-%m-%d ####上个月的今天 date -d last-month +%Y-%m-%d ####下个月的今天 date -d next-month +%Y-%m-%d ###当前时间 date +%Y-%m-%d_%H_%M_%S ###注意 : 当你不希望出现无意义的 0 时(比如说 1999/03/07)，则可以在标记中插入 – 符号 ###比如说 date +%-H:%-M:%-S 会把时分秒中无意义的 0 给去掉，像是原本的 08:09:04 会变为 8:9:4。 date +%Y%-m%-d ##201766 日期方面 : %a : 星期几 (Sun.</description>
    </item>
    
    <item>
      <title>常用脚本_python</title>
      <link>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_python/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_python/</guid>
      <description>python安装 yum install -y gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel yum install -y libffi-devel cd /opt/ wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tar.xz tar -xvJf Python-3.7.0.tar.xz mkdir -p /usr/local/python3 cd Python-3.7.4 ./configure --prefix=/usr/local/python3 make &amp;amp;&amp;amp; make install ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3 ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3 python3 -V pip3 -V </description>
    </item>
    
    <item>
      <title>常用脚本_linux性能</title>
      <link>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_%E6%80%A7%E8%83%BD%E6%9F%A5%E7%9C%8B/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/ops/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_%E6%80%A7%E8%83%BD%E6%9F%A5%E7%9C%8B/</guid>
      <description>System_info wget https://www.dboop.com/download/System_info.sh &amp;amp;&amp;amp; sh System_info.sh cpu wget https://www.dboop.com/download/cpu.sh &amp;amp;&amp;amp; sh cpu.sh disk wget https://www.dboop.com/download/disk.sh &amp;amp;&amp;amp; sh disk.sh iostat  wget https://www.dboop.com/download/iostat.sh &amp;amp;&amp;amp; sh iostat.sh loadavg  wget https://www.dboop.com/download/loadavg.sh &amp;amp;&amp;amp; sh loadavg.sh memory wget https://www.dboop.com/download/memory.sh &amp;amp;&amp;amp; sh memory.sh show_disks  wget https://www.dboop.com/download/show_disks.sh &amp;amp;&amp;amp; sh show_disks.sh swap  wget https://www.dboop.com/download/swap.sh &amp;amp;&amp;amp; sh swap.sh vmstat wget https://www.dboop.com/download/vmstat.sh &amp;amp;&amp;amp; sh vmstat.sh 内存 # 查内存占用情况 ps -e -o &#39;pid,comm,args,pcpu,rsz,vsz,stime,user,uid&#39; # 其中rsz是是实际内存 ps -e -o &#39;pid,comm,args,pcpu,rsz,vsz,stime,user,uid&#39; | grep java | sort -nrk5 # 其中rsz为实际内存，上例实现按内存排序，由大到小 # 查内存占用情况 ps -aux | sort -k4nr | head -n 10 # 使用指令查看占用的物理内存， ps aux|awk &#39;{sum+=$6} END {print sum/1024}&#39; # 使用指令，核实进程的最大使用内存量 ps -eo pid,rss,pmem,pcpu,vsz,args --sort=rss # 查内存命令 ps p 916 -L -o pcpu,pmem,pid,tid,time,tname,cmd # 排查高CPU占用介绍的PS命令 ps -mp 9004 -o THREAD,tid,time,rss,size,%mem # 分析具体的对象数目和占用内存大小 jmap -histo:live [pid] # 利用MAT工具分析是否存在内存泄漏等等。 jmap -dump:live,format=b,file=xxx.</description>
    </item>
    
    <item>
      <title>MySQL常用脚本_AlterTable</title>
      <link>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_altertable/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_altertable/</guid>
      <description>速记  当修改表结构的时候有三种选项: ALTER TABLE t1 ALTER COLUMN ... ALTER TABLE t1 CHANGE COLUMN ... ALTER TABLE t1 MODIFY COLUMN ... 容易记混 一般我们这样记 Change column 无所不能 Modify column 不能给列改名,其他都行 Alter Column 最弱,改点默认值什么的(但是他也有好处,非常快和安全)  增  增加列(单列)  ALTER TABLE t1 ADD col-name col-type comment &#39;xxx&#39;;  增加列(多列)  ALTER TABLE t1 ADD col-name col-type comment &#39;xxx&#39;, ADD col-name col-type(col-length) comment &#39;xxx&#39;;  增加表字段并指明字段放置为第一列  ALTER TABLE t1 add col-name col-type COMMENT &#39;sss&#39; FIRST;  增加表字段并指明字段放置为特定列后面  ALTER TABLE t1 add col-name col-type after col-name-1; 删  删除列  ALTER TABLE t1 DROP col-name;  删除表中主键  Alter TABLE t1】 drop primary key 改  修改字段类型  - 使用MODIFY修改字段类型 ALTER TABLE t1 modify column col-name col-type; - 使用CHANGE修改字段类型 ALTER TABLE t1 change col-name col-name col-type;  修改列名  使用CHANGE修改字段名称 ALTER TABLE t1 change old-col-name new-col-name col-type;  修改表名  - 重命名表1 ALTER TABLE t1 RENAME 【表新名字】 - 重命名表2 RENAME TABLE t1 to new-table-name;  修改默认值  - 为字段设置NULL和DEFAULT ALTER TABLE t1 modify col-name col-type not null default 100; - 修改字段的默认值 ALTER TABLE t1 alter col-name set default 10000; -字段删除默认值 ALTER TABLE t1 alter col-name drop default; </description>
    </item>
    
    <item>
      <title>MySQL常用脚本_binlog解析和回滚</title>
      <link>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_binlog/</link>
      <pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_binlog/</guid>
      <description>解析binlog 方法1:mysqlbinlog mysqlbinlog --no-defaults --base64-output=decode-rows -vv --database=dboop --start-datetime=&#39;2020-10-11 00:00:00&#39; --stop-datetime=&#39;2020-10-11 15:00:00&#39; mysql-bin.000075 &amp;gt;75.sql 常用参数 database：只列出该数据库下的binlog数据，但无法过滤由触发器执行的SQL。 base64-output=decode-rows -vv：显示具体 SQL 语句。 skip-gtids=true：忽略 GTID 显示。  输出结果  # at 20001 #201011 12:04:09 server id 1 end_log_pos 20094 CRC32 0x2b305ac Query thread_id=53 exec_time=0 error_code=0 SET TIMESTAMP=1651011012/*!*/; BEGIN /*!*/; 上面输出包括信息：
 position: 位于文件中的位置，即第一行的（# at 20001）,说明该事件记录从文件第20001个字节开始 timestamp: 事件发生的时间戳，即第二行的（#201011 12:04:09） server id: 服务器标识（1） end_log_pos 表示下一个事件开始的位置（即当前事件的结束位置+1） thread_id: 执行该事件的线程id （thread_id=53） exec_time: 事件执行的花费时间 error_code: 错误码，0意味着没有发生错误 type:事件类型Query  方法2:my2sql wget https://www.</description>
    </item>
    
    <item>
      <title>MySQL常用脚本_故障定位</title>
      <link>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_%E6%95%85%E9%9A%9C%E5%AE%9A%E4%BD%8D/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_%E6%95%85%E9%9A%9C%E5%AE%9A%E4%BD%8D/</guid>
      <description>当前正在运行的SQL select id,user,db,info,Command,Time,State from information_schema.processlist where info is not null and user not in (&#39;dba&#39;,&#39;repl&#39;) order by time desc limit 50; -- 杀连接 select concat(&#39;kill &#39;,id,&#39;;&#39;) as ids from information_schema.processlist where time&amp;gt;50 and info is not null and user like &#39;%&#39; and db like &#39;%&#39; order by time desc ; -- 杀连接shell mysqlw -h 127.0.0.1 -P 3306 -e &amp;quot;select concat(&#39;kill &#39;,id,&#39;;&#39;) as ids from information_schema.processlist where db like &#39;dboop%&#39; and user like &#39;%&#39; &amp;quot; &amp;gt;&amp;gt;3306kill.</description>
    </item>
    
    <item>
      <title>MySQL常用脚本_mysqldump</title>
      <link>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_mysqldump/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_mysqldump/</guid>
      <description>如果用loginpath的可以用
  mysqldump --login-path=dba 代替 mysqldump -uroot -p123456 常用命令 备份整个实例(dump全实例) mysqldump -uroot -p123456 -h127.0.0.1 -P3306 --single-transaction --column-statistics=0 --skip_add_locks --skip-lock-tables --master-data=2 -A | gzip &amp;gt; /data/mysqlbackup/dboop_dump`date &#39;+%m-%d-%Y&#39;`.sql.gz 备份实例中的用户库(用于实例迁移或升级) mysql -uroot -p123456 -h127.0.0.1 -P3306 -e &amp;quot;show databases&amp;quot; |grep -Ev &amp;quot;Database|information_schema|mysql|performance_schema&amp;quot; | xargs mysqldump -uroot -p123456 -h127.0.0.1 -P3306 --single-transaction --column-statistics=0 --skip_add_locks --skip-lock-tables --master-data=2 --databases &amp;gt; /data/mysqlbackup/dboop_dump0401.sql -- 此时mysql.user用户也没有迁移过来,如果需要迁移用户,参考: https://www.dboop.com/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3/ 导出db1、db2两个数据库的所有数据 mysqldump -uroot -p123456 --set-gtid-purged=OFF --skip_add_locks --skip-lock-tables --databases db1 db2 &amp;gt; /data/mysqlbackup/dboop_dump0401.sql 导出db1中的a1、a2表 mysqldump -uroot -p123456 --set-gtid-purged=OFF --skip_add_locks --skip-lock-tables --databases db1 --tables a1 a2 &amp;gt; /data/mysqlbackup/dboop_dump0401.</description>
    </item>
    
    <item>
      <title>MySQL常用脚本_用户相关</title>
      <link>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3/</guid>
      <description>生成随机密码 select substring(md5(rand()), 1, 15); select left(replace(uuid(), &#39;-&#39;, &#39;.&#39;),15); 创建用户及赋权 MySQL5.6及以前 grant select on 库名.* to `用户名`@`主机名` identified by &#39;密码&#39;; MySQL5.7+ create user `用户名`@`主机名` identified by &#39;密码&#39;; grant select on 库名.* to `用户名`@`主机名`; MySQL8.0 create user `用户名`@`主机名`identified with mysql_native_password by &#39;密码&#39;; GRANT select on 库名.* TO `用户名`@`主机名`; 常用语句 -- 创建一个管理员帐号 create user &#39;dba&#39;@&#39;%&#39; IDENTIFIED BY &#39;********&#39;; GRANT ALL PRIVILEGES ON *.* TO &#39;dba&#39;@&#39;%&#39; WITH GRANT OPTION; -- 创建一个复制帐号 create user repl@&#39;%&#39; identified with mysql_native_password by &#39;********&#39;; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.</description>
    </item>
    
    <item>
      <title>MySQL常用脚本_免密登录login-path设置</title>
      <link>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95loginpath/</link>
      <pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/mysql/mysql%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC_%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95loginpath/</guid>
      <description>保存账号信息 mysql_config_editor set --login-path=dba --user=root --host=127.0.0.1 --password 其中可配置项
-h,–host=name 添加host到登陆文件中 -G,–login-path=name 在登录文件中为login path添加名字（默认为client） -p,–password 在登陆文件中添加密码（该密码会被mysql_config_editor自动加密） -u,–user 添加用户名到登陆文件中 -S,–socket=name 添加sock文件路径到登陆文件中 -P,–port=name 添加登陆端口到登陆文件中 查看配置 mysql_config_editor print -all 删除配置
mysql_config_editor remove --login-path=dba 登陆数据库
mysql --login-path=dba </description>
    </item>
    
  </channel>
</rss>
