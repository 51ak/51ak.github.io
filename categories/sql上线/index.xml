<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL上线 on Classic</title>
    <link>/categories/sql%E4%B8%8A%E7%BA%BF/</link>
    <description>Recent content in SQL上线 on Classic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 19 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="/categories/sql%E4%B8%8A%E7%BA%BF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试环境治理数据库相关部分</title>
      <link>/dba/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%B2%BB%E7%90%86/</link>
      <pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>/dba/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%B2%BB%E7%90%86/</guid>
      <description> 下午邀请了去哪儿网的测试同学来公司分享 介绍了去哪儿网的测试环境3.0版本 1.0是固定环境(实体) 2.0是noah平台(测试云平台) 3.0是软路由平台 这里面的代际变更和功能点这里不多做介绍 我想总结和对比的是测试环境治理时的数据库部分  测试环境的数据库的不同阶段需求  1.业务量小的时候，一套测试环境就可以了(&amp;lt;10人研发:test) 2.继续发展,需要把测试环境和开发环境分离出来(10-30人研发:test,dev) 3.业务继续壮大,研发人员开始出现金个分组,需要多套测试环境(30-100人研发团队:test1,test2,dev) 4.业务继续壮大,研发人员开始出现金个分组,需要多套测试环境(100-500人研发团队:test1,test2,test3&amp;hellip;,dev,preprod) 5.业务继续壮大,研发人员分事业部，需要云环境(500+研发团队:测试云环境)  多套测试环境的数据结构同步  这里要分两种情况来区别处理 如果是测试云环境，需要有个基准环境出来，过程中有大量的自动化运维参与 如果是独立部署的测试环境,需要手动同步  测试云环境  以生产库为最终标准 定义一个基准环境，基准环境的数据库结构会实时跟线上同步 生产环境的上线将会自动应用到基准环境 其他环境的数据结构会和基准环境对齐 在一个固定的时间点，自动或手动的强制和基准环境对齐 允许非基准环境下的数据库结构和基准环境不一致 非基准环境造的数据和变更会随着环境一起销毁 非基准环境可以随时销毁，重新从基准环境拉一套出来 基准环境的数据维护是件很重要的事  独立部署的测试环境  在非云状态的固定的独立部署的一套或多套测试环境 基准环境就是生产环境 数据库表结构会和生产环境对齐 每个固定的时间点所有测试环境都会和生产环境对比表结构和其他对象 发送出来异常报告 是否修复需要测试或研发人员自行决定是否对齐 SQL上线时可以选择多环境上线，一段脚本在多个环境同时执行 参见：数据库多环境SQL上线。  造数据问题  测试环境的数据谁来造？ 字典类的基础数据从线上同步（允许定时同步） 客户,订单类数据尽可能的由测试人员随机生成 部分数据允许按一定规则从线上同步回来（需要脱敏） 测试环境的数据也会有完整的防误删和备份策略  </description>
    </item>
    
    <item>
      <title>自动化流程:数据找回(二:Oracle部分)</title>
      <link>/dba/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%81%E7%A8%8B_%E6%95%B0%E6%8D%AE%E6%89%BE%E5%9B%9E%E9%97%AA%E5%9B%9E_2/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/dba/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%81%E7%A8%8B_%E6%95%B0%E6%8D%AE%E6%89%BE%E5%9B%9E%E9%97%AA%E5%9B%9E_2/</guid>
      <description>续上一篇： 自动化流程:数据找回(一:MySQL数据闪回)
上一篇说的是
 1.数据找回的作用 2.MySQL数据找回自动化流程功能演示 3.自动化流程的代码配置  这篇主要介绍Oracle的数据找回自动化流程.
一些改进  改进1:Oracle数据找回功能从利用OGG改到用归档日志  上一篇的结尾,说Oracle的数据找回.要用到OGG+Kafka的方案. ​最终经过对比验证,换了更好的Oracle原生归档日志方案   改进2:增加了操作类型的筛选项,这样可以针对指定的操作(例如:delete)进行redo和undo  Oracle数据回退功能的方案对比 当尝试做Oracle数据回退功能时有以下几个方案
 Oracle数据闪回功能 ,优:自带的功能,速度快,简单 缺:需要开启闪回段,闪回的时间太短(平均约30分钟内) 全备和日志还原,优:30天内数据可回退 ,缺:慢,需要资源大,复杂不利于自动化脚本 OGG,因为我们的环境大部分重点表都做了OGG到kafka的订阅, 所以可以直接扫描kafka的信息来获取指定表的变更, 优:资源占用少,快,开发难度低 缺: 如果要回退的这张表没有做OGG订阅怎么办? 归档日志解析, 优:7天内任意时间点可回退 ,缺: 每次回退的时间段不能太长  我们完成了方案3和方案4的代码开发工作,最终选用了方案4: 归档日志解析
 脚本化实现难度小 7天内任意时间点,能满足90%的业务需求 回滚速度快,举个例子:  研发提交流程,要求看A数据库里Order表在周三上午10:00-10:30的所有修改动作,提交申请后,大约10秒内就可以完成这个流程.   覆盖的范围大,线上/测试/开发 环境的所有库表都支持 占用资源少,对线上影响小  Oracle数据回退功能演示  在测试环境还原一次全库的历史快照只需要 0.4秒,非常的快速!!!  小结 当数据库有了这个功能以后:
 研发可以在改错数据的时候,快速提交流程回退数据 当有奇怪的线上数据问题时,可以很方便的生成redoSQL,重放过去某个时间段的数据修改 数据库有大量写入时,快速的定位是哪张表,什么样的SQL引起的  </description>
    </item>
    
    <item>
      <title>自动化流程:数据找回(一:MySQL数据闪回)</title>
      <link>/dba/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%81%E7%A8%8B_%E6%95%B0%E6%8D%AE%E6%89%BE%E5%9B%9E%E9%97%AA%E5%9B%9E/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/dba/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%81%E7%A8%8B_%E6%95%B0%E6%8D%AE%E6%89%BE%E5%9B%9E%E9%97%AA%E5%9B%9E/</guid>
      <description>功能介绍 数据找回,又名数据闪回,误删除回滚,误操作回滚,数据重做&amp;hellip;
解决的问题  数据库里的数据被误删除/更新,需要定位修改的SQL语句,影响范围,回滚误操作,此时怎么办?
  方法1: DBA用前一天的数据库备份还原出来,然后找到更新前的SQL(这个通常需要花费几个小时的时间) 方法2: 如果发现误操作的时间比较及时,一般7天以内,可以通过解析数据库日志(MySQL的binlog,Oracle的archivelog)比较快速的找到误操作的SQL及时回滚  两个方法,都需要DBA参与
   方法 依赖文件 可恢复范围 操作用时     方法一 全备 1个月内 1-5小时   方法二 日志 7天 0.5小时    其中方法2,需要DBA找到并登录目标服务器,解析数据库日志,其中有研发和DBA的沟通时间,手动处理时间,我们可以通过自动化流程,让研发人员自助填写需求,在dba审批通过后系统自动执行.
自动化流程的作用  1.提高工作效率,不再需要DBA手动去查日志,解析日志&amp;hellip; 将原先几十分钟的工作,变成自动化 2.减少误操作,减少手动处理问题时的手滑,操作命令写错了的运维风险 3.减少沟通成本,自助化服务无需(dba和研发)反复沟通细节 4.一般发现有数据更新错了,需要很快的得到响应,自助化流程可以减少非工作时间联系DBA的响应时长 5.便于统计哪些项目成员或业务线出现这种误更新的失误.  功能预览 设计了以下的表单填写页面,用于收集信息 设计了两步审批  负责人审批: 如果该库有具体的DB负责人,则DB负责人审批.否则由提交申请的用户上级审批 DBA审批:DBA审批时会看到将要自动化执行的命令,并且可以在执行前修改部分参数.(通常默认的命令是最优的)  后端执行  执行是异步的.执行过程中会展示运行日志 执行完成后,会展示以下三块内容 1.后台运行日志 (用于DBA排查自动化任务时是否有异常) 2.SQL内容概览 (展示符合条件的表共有多少次ins/upd/del操作. 用于验证是否符合预期,该概览目前只支持MySQL,Oracle的还没实现) 3.解析出来的SQL文件 (最重要的部分)  代码实现 step1:表单代码 &amp;lt;step id=&amp;quot;1&amp;quot; name=&amp;quot;数据找回&amp;quot; displaytype=&amp;quot;input&amp;quot;&amp;gt;&amp;lt;form&amp;gt; &amp;lt;input name=&amp;quot;dbid&amp;quot; title=&amp;quot;选择数据库&amp;quot; inputtype=&amp;quot;select_group&amp;quot; desc=&amp;quot;&amp;quot; defaultvalue=&amp;quot;&amp;quot; &amp;gt;&amp;lt;style&amp;gt;&amp;lt;div-class&amp;gt;span24&amp;lt;/div-class&amp;gt;&amp;lt;input-class&amp;gt;input-normal,input-small,input-normal,input-normal&amp;lt;/input-class&amp;gt; &amp;lt;connstr&amp;gt;link:db_monitor&amp;lt;/connstr&amp;gt;&amp;lt;sqlstr&amp;gt;select b.</description>
    </item>
    
    <item>
      <title>数据库多环境SQL上线</title>
      <link>/dba/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%9A%E7%8E%AF%E5%A2%83sql%E4%B8%8A%E7%BA%BF/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/dba/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%9A%E7%8E%AF%E5%A2%83sql%E4%B8%8A%E7%BA%BF/</guid>
      <description>数据库多环境分类 MySQL数据库按环境区分有以下几种数据库  正式环境数据库：又称生产环境 验证环境数据库：上线验证环境，介于测试和生产之间的一个环境 测试环境数据库：又细分为   test0测试环境：默认测试环境 test1测试环境: test1测试环境简称t1环境，和test0环境是并行关系 test2,test3&amp;hellip; 未来会有更多的测试环境  开发环境：又称Dev环境，用于研发本地调试代码  Oralce测试环境参考MySQL的测试环境 数据库多环境上线的问题  SQL上线（建表/改表，改数据等） 需要在每个环境下都提个流程，研发的重复工作量大 研发可能会忘掉部分环境下执行某个SQL，造成各种环境和线上环境的差异越来越大  解决方式  提供一个多环境SQL上线流程，研发可以勾选每次上线要执行的环境 提供一个多环境数据库表结构对比工具 提供一个不同环境的数据库对象自动同步工具  多环境SQL上线流程 这里只演示MySQL多环境上线流程，Oracle的多环境上线流程和这个一模一样
步骤1.选择数据库 步骤2.填写上线内容  注意1：这里可以自由勾选要执行的数据库环境，红色的是线上环境，绿色的是测试和验证环境，蓝色的是开发环境 注意2：所有环境都会执行SQL验证，所有环境通过验证，才可以进入下一步  步骤3.流程审批  如果通过了系统的SQL审核，会出现如下图的界面，进入流程审批 3.负责人审批是必选步骤 4.测试审批是用户可选步骤 5.DBA审批会根据用户提供的SQL内容，系统判定是否有dba介入（建表/改表/大范围修改数据DBA会审批，否则会自动跳过这一步）  步骤4.用户执行  审批完成以后，由发起人自由选择在合适的时间，点击上线按扭   步骤5.执行结果  执行完成后，会显示每个环境的执行结果。   后台配置 这个流程也是在dboop平台上用xml配置的，后台界面如下</description>
    </item>
    
  </channel>
</rss>
